//Generated by LateBindingApi.CodeGenerator
using System;
using NetRuntimeSystem = System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;
using LateBindingApi.Core;
namespace NetOffice.OWC10Api
{
	///<summary>
	/// DispatchInterface Names SupportByLibraryAttribute OWC10, 1
	///</summary>
	[SupportByLibraryAttribute("OWC10", 1)]
	[EntityTypeAttribute(EntityType.IsDispatchInterface)]
	public class Names : COMObject ,IEnumerable<NetOffice.OWC10Api.Name>
	{
		#pragma warning disable
		#region Type Information

        private static Type _type;

		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public static Type LateBindingApiWrapperType
        {
            get
            {
                if (null == _type)
                    _type = typeof(Names);
                    
                return _type;
            }
        }
        
        #endregion
        
		#region Construction

        /// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Names(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}
		
		/// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        /// <param name="comProxyType">Type of inner wrapped COM proxy"</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Names(COMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}
		
		/// <param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Names(COMObject replacedObject) : base(replacedObject)
		{
		}
		
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Names() : base()
		{
		}
		
		/// <param name="progId">registered ProgID</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Names(string progId) : base(progId)
		{
		}
		
		#endregion
		
		#region Properties

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("OWC10", 1)]
		public NetOffice.OWC10Api.ISpreadsheet Application
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Application", paramsArray);
				NetOffice.OWC10Api.ISpreadsheet newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.OWC10Api.ISpreadsheet;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("OWC10", 1)]
		public Int32 Count
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Count", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("OWC10", 1)]
		public COMObject Parent
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Parent", paramsArray);
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem);
				return newObject;
			}
		}

		#endregion

		#region Methods

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Index">optional object Index</param>
		/// <param name="IndexLocal">optional object IndexLocal</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		[SupportByLibraryAttribute("OWC10", 1)]
		[NetRuntimeSystem.Runtime.CompilerServices.IndexerName("Item")]
		public NetOffice.OWC10Api.Name this[object index, object indexLocal, object refersTo]
		{
			get
			{
				object[] paramsArray = Invoker.ValidateParamsArray(index, indexLocal, refersTo);
				object returnItem = Invoker.MethodReturn(this, "Item", paramsArray);
				NetOffice.OWC10Api.Name newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(this, returnItem,NetOffice.OWC10Api.Name.LateBindingApiWrapperType) as NetOffice.OWC10Api.Name;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		/// <param name="MacroType">optional object MacroType</param>
		/// <param name="ShortcutKey">optional object ShortcutKey</param>
		/// <param name="Category">optional object Category</param>
		/// <param name="NameLocal">optional object NameLocal</param>
		/// <param name="RefersToLocal">optional object RefersToLocal</param>
		/// <param name="CategoryLocal">optional object CategoryLocal</param>
		/// <param name="RefersToR1C1">optional object RefersToR1C1</param>
		/// <param name="RefersToR1C1Local">optional object RefersToR1C1Local</param>
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible, object macroType, object shortcutKey, object category, object nameLocal, object refersToLocal, object categoryLocal, object refersToR1C1, object refersToR1C1Local)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible, macroType, shortcutKey, category, nameLocal, refersToLocal, categoryLocal, refersToR1C1, refersToR1C1Local);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		/// <param name="MacroType">optional object MacroType</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible, object macroType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible, macroType);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		/// <param name="MacroType">optional object MacroType</param>
		/// <param name="ShortcutKey">optional object ShortcutKey</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible, object macroType, object shortcutKey)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible, macroType, shortcutKey);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		/// <param name="MacroType">optional object MacroType</param>
		/// <param name="ShortcutKey">optional object ShortcutKey</param>
		/// <param name="Category">optional object Category</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible, object macroType, object shortcutKey, object category)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible, macroType, shortcutKey, category);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		/// <param name="MacroType">optional object MacroType</param>
		/// <param name="ShortcutKey">optional object ShortcutKey</param>
		/// <param name="Category">optional object Category</param>
		/// <param name="NameLocal">optional object NameLocal</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible, object macroType, object shortcutKey, object category, object nameLocal)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible, macroType, shortcutKey, category, nameLocal);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		/// <param name="MacroType">optional object MacroType</param>
		/// <param name="ShortcutKey">optional object ShortcutKey</param>
		/// <param name="Category">optional object Category</param>
		/// <param name="NameLocal">optional object NameLocal</param>
		/// <param name="RefersToLocal">optional object RefersToLocal</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible, object macroType, object shortcutKey, object category, object nameLocal, object refersToLocal)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible, macroType, shortcutKey, category, nameLocal, refersToLocal);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		/// <param name="MacroType">optional object MacroType</param>
		/// <param name="ShortcutKey">optional object ShortcutKey</param>
		/// <param name="Category">optional object Category</param>
		/// <param name="NameLocal">optional object NameLocal</param>
		/// <param name="RefersToLocal">optional object RefersToLocal</param>
		/// <param name="CategoryLocal">optional object CategoryLocal</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible, object macroType, object shortcutKey, object category, object nameLocal, object refersToLocal, object categoryLocal)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible, macroType, shortcutKey, category, nameLocal, refersToLocal, categoryLocal);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="RefersTo">optional object RefersTo</param>
		/// <param name="Visible">optional object Visible</param>
		/// <param name="MacroType">optional object MacroType</param>
		/// <param name="ShortcutKey">optional object ShortcutKey</param>
		/// <param name="Category">optional object Category</param>
		/// <param name="NameLocal">optional object NameLocal</param>
		/// <param name="RefersToLocal">optional object RefersToLocal</param>
		/// <param name="CategoryLocal">optional object CategoryLocal</param>
		/// <param name="RefersToR1C1">optional object RefersToR1C1</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void Add(object name, object refersTo, object visible, object macroType, object shortcutKey, object category, object nameLocal, object refersToLocal, object categoryLocal, object refersToR1C1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, refersTo, visible, macroType, shortcutKey, category, nameLocal, refersToLocal, categoryLocal, refersToR1C1);
			Invoker.Method(this, "Add", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		/// <param name="varMacroType">optional object varMacroType</param>
		/// <param name="varShortcutKey">optional object varShortcutKey</param>
		/// <param name="varCategory">optional object varCategory</param>
		/// <param name="varNameLocal">optional object varNameLocal</param>
		/// <param name="varRefersToLocal">optional object varRefersToLocal</param>
		/// <param name="varCategoryLocal">optional object varCategoryLocal</param>
		/// <param name="varRefersToR1C1">optional object varRefersToR1C1</param>
		/// <param name="varRefersToR1C1Local">optional object varRefersToR1C1Local</param>
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible, object varMacroType, object varShortcutKey, object varCategory, object varNameLocal, object varRefersToLocal, object varCategoryLocal, object varRefersToR1C1, object varRefersToR1C1Local)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible, varMacroType, varShortcutKey, varCategory, varNameLocal, varRefersToLocal, varCategoryLocal, varRefersToR1C1, varRefersToR1C1Local);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		/// <param name="varMacroType">optional object varMacroType</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible, object varMacroType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible, varMacroType);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		/// <param name="varMacroType">optional object varMacroType</param>
		/// <param name="varShortcutKey">optional object varShortcutKey</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible, object varMacroType, object varShortcutKey)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible, varMacroType, varShortcutKey);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		/// <param name="varMacroType">optional object varMacroType</param>
		/// <param name="varShortcutKey">optional object varShortcutKey</param>
		/// <param name="varCategory">optional object varCategory</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible, object varMacroType, object varShortcutKey, object varCategory)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible, varMacroType, varShortcutKey, varCategory);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		/// <param name="varMacroType">optional object varMacroType</param>
		/// <param name="varShortcutKey">optional object varShortcutKey</param>
		/// <param name="varCategory">optional object varCategory</param>
		/// <param name="varNameLocal">optional object varNameLocal</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible, object varMacroType, object varShortcutKey, object varCategory, object varNameLocal)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible, varMacroType, varShortcutKey, varCategory, varNameLocal);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		/// <param name="varMacroType">optional object varMacroType</param>
		/// <param name="varShortcutKey">optional object varShortcutKey</param>
		/// <param name="varCategory">optional object varCategory</param>
		/// <param name="varNameLocal">optional object varNameLocal</param>
		/// <param name="varRefersToLocal">optional object varRefersToLocal</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible, object varMacroType, object varShortcutKey, object varCategory, object varNameLocal, object varRefersToLocal)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible, varMacroType, varShortcutKey, varCategory, varNameLocal, varRefersToLocal);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		/// <param name="varMacroType">optional object varMacroType</param>
		/// <param name="varShortcutKey">optional object varShortcutKey</param>
		/// <param name="varCategory">optional object varCategory</param>
		/// <param name="varNameLocal">optional object varNameLocal</param>
		/// <param name="varRefersToLocal">optional object varRefersToLocal</param>
		/// <param name="varCategoryLocal">optional object varCategoryLocal</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible, object varMacroType, object varShortcutKey, object varCategory, object varNameLocal, object varRefersToLocal, object varCategoryLocal)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible, varMacroType, varShortcutKey, varCategory, varNameLocal, varRefersToLocal, varCategoryLocal);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary OWC10 1
		/// </summary>
		/// <param name="varName">optional object varName</param>
		/// <param name="varRefersTo">optional object varRefersTo</param>
		/// <param name="varVisible">optional object varVisible</param>
		/// <param name="varMacroType">optional object varMacroType</param>
		/// <param name="varShortcutKey">optional object varShortcutKey</param>
		/// <param name="varCategory">optional object varCategory</param>
		/// <param name="varNameLocal">optional object varNameLocal</param>
		/// <param name="varRefersToLocal">optional object varRefersToLocal</param>
		/// <param name="varCategoryLocal">optional object varCategoryLocal</param>
		/// <param name="varRefersToR1C1">optional object varRefersToR1C1</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("OWC10", 1)]
		public void AddUI(object varName, object varRefersTo, object varVisible, object varMacroType, object varShortcutKey, object varCategory, object varNameLocal, object varRefersToLocal, object varCategoryLocal, object varRefersToR1C1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(varName, varRefersTo, varVisible, varMacroType, varShortcutKey, varCategory, varNameLocal, varRefersToLocal, varCategoryLocal, varRefersToR1C1);
			Invoker.Method(this, "AddUI", paramsArray);
		}

		#endregion

        #region IEnumerable<NetOffice.OWC10Api.Name> Member
		
		/// <summary>
		/// SupportByLibraryAttribute OWC10, 1
		/// </summary>
		[SupportByLibraryAttribute("OWC10", 1)]
        public IEnumerator<NetOffice.OWC10Api.Name> GetEnumerator()  
        {
            NetRuntimeSystem.Collections.IEnumerable innerEnumerator = (this as NetRuntimeSystem.Collections.IEnumerable);
            foreach (NetOffice.OWC10Api.Name item in innerEnumerator)
                yield return item;
        }

        #endregion
           
        #region IEnumerable Members
        
		/// <summary>
		/// SupportByLibraryAttribute OWC10, 1
		/// </summary>
		[SupportByLibraryAttribute("OWC10", 1)]
		IEnumerator NetRuntimeSystem.Collections.IEnumerable.GetEnumerator()
		{
			object enumProxy = Invoker.PropertyGet(this, "_NewEnum");
			COMObject enumerator = new COMObject(this, enumProxy, true);
			Invoker.Method(enumerator, "Reset", null);
			bool isMoveNextTrue = (bool)Invoker.MethodReturn(enumerator, "MoveNext", null);
            while (true == isMoveNextTrue)
            {
                object itemProxy = Invoker.PropertyGet(enumerator, "Current", null);
                COMObject returnClass = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, itemProxy);
                isMoveNextTrue = (bool)Invoker.MethodReturn(enumerator, "MoveNext", null);
				yield return returnClass;
            }
        }

        #endregion
		#pragma warning restore
	}
}