//Generated by LateBindingApi.CodeGenerator
using System;
using NetRuntimeSystem = System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Reflection;
using LateBindingApi.Core;
namespace NetOffice.WordApi
{
	///<summary>
	/// DispatchInterface MailMerge SupportByLibrary WD09 WD10 WD11 WD12 WD14 
	///</summary>
	[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
	public class MailMerge : COMObject
	{
		#pragma warning disable
		#region Construction

        /// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}
		
		/// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        /// <param name="comProxyType">Type of inner wrapped COM proxy"</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge(COMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}
		
		/// <param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge(COMObject replacedObject) : base(replacedObject)
		{
		}
		
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge()
		{
		}
		
		#endregion
		
		#region Properties

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Application Application
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Application", paramsArray);
				NetOffice.WordApi.Application newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Application;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Creator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Creator", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public COMObject Parent
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Parent", paramsArray);
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem);
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdMailMergeMainDocType MainDocumentType
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MainDocumentType", paramsArray);
				return (NetOffice.WordApi.Enums.WdMailMergeMainDocType)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MainDocumentType", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdMailMergeState State
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "State", paramsArray);
				return (NetOffice.WordApi.Enums.WdMailMergeState)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdMailMergeDestination Destination
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Destination", paramsArray);
				return (NetOffice.WordApi.Enums.WdMailMergeDestination)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Destination", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.MailMergeDataSource DataSource
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "DataSource", paramsArray);
				NetOffice.WordApi.MailMergeDataSource newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.MailMergeDataSource;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.MailMergeFields Fields
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Fields", paramsArray);
				NetOffice.WordApi.MailMergeFields newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.MailMergeFields;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 ViewMailMergeFieldCodes
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ViewMailMergeFieldCodes", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "ViewMailMergeFieldCodes", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool SuppressBlankLines
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "SuppressBlankLines", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "SuppressBlankLines", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool MailAsAttachment
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MailAsAttachment", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MailAsAttachment", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public string MailAddressFieldName
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MailAddressFieldName", paramsArray);
				return (string)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MailAddressFieldName", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public string MailSubject
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MailSubject", paramsArray);
				return (string)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MailSubject", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public bool HighlightMergeFields
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "HighlightMergeFields", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "HighlightMergeFields", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdMailMergeMailFormat MailFormat
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MailFormat", paramsArray);
				return (NetOffice.WordApi.Enums.WdMailMergeMailFormat)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MailFormat", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public string ShowSendToCustom
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ShowSendToCustom", paramsArray);
				return (string)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "ShowSendToCustom", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public Int32 WizardState
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "WizardState", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "WizardState", paramsArray);
			}
		}

		#endregion

		#region Methods

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">ref optional object Name</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">ref optional object HeaderRecord</param>
		/// <param name="MSQuery">ref optional object MSQuery</param>
		/// <param name="SQLStatement">ref optional object SQLStatement</param>
		/// <param name="SQLStatement1">ref optional object SQLStatement1</param>
		/// <param name="Connection">ref optional object Connection</param>
		/// <param name="LinkToSource">ref optional object LinkToSource</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CreateDataSource(ref object name, ref object passwordDocument, ref object writePasswordDocument, ref object headerRecord, ref object mSQuery, ref object sQLStatement, ref object sQLStatement1, ref object connection, ref object linkToSource)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord, mSQuery, sQLStatement, sQLStatement1, connection, linkToSource);
			Invoker.Method(this, "CreateDataSource", paramsArray, modifiers);
			name = (object)paramsArray[0];
			passwordDocument = (object)paramsArray[1];
			writePasswordDocument = (object)paramsArray[2];
			headerRecord = (object)paramsArray[3];
			mSQuery = (object)paramsArray[4];
			sQLStatement = (object)paramsArray[5];
			sQLStatement1 = (object)paramsArray[6];
			connection = (object)paramsArray[7];
			linkToSource = (object)paramsArray[8];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CreateDataSource()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">ref optional object HeaderRecord</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CreateHeaderSource(string name, ref object passwordDocument, ref object writePasswordDocument, ref object headerRecord)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord);
			Invoker.Method(this, "CreateHeaderSource", paramsArray, modifiers);
			passwordDocument = (object)paramsArray[1];
			writePasswordDocument = (object)paramsArray[2];
			headerRecord = (object)paramsArray[3];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CreateHeaderSource(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "CreateHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="ConfirmConversions">ref optional object ConfirmConversions</param>
		/// <param name="ReadOnly">ref optional object ReadOnly</param>
		/// <param name="LinkToSource">ref optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">ref optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">ref optional object PasswordTemplate</param>
		/// <param name="Revert">ref optional object Revert</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">ref optional object WritePasswordTemplate</param>
		/// <param name="Connection">ref optional object Connection</param>
		/// <param name="SQLStatement">ref optional object SQLStatement</param>
		/// <param name="SQLStatement1">ref optional object SQLStatement1</param>
		[SupportByLibrary("WD09")]
		public void OpenDataSource(string name, ref object format, ref object confirmConversions, ref object readOnly, ref object linkToSource, ref object addToRecentFiles, ref object passwordDocument, ref object passwordTemplate, ref object revert, ref object writePasswordDocument, ref object writePasswordTemplate, ref object connection, ref object sQLStatement, ref object sQLStatement1)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement, sQLStatement1);
			Invoker.Method(this, "OpenDataSource", paramsArray, modifiers);
			format = (object)paramsArray[1];
			confirmConversions = (object)paramsArray[2];
			readOnly = (object)paramsArray[3];
			linkToSource = (object)paramsArray[4];
			addToRecentFiles = (object)paramsArray[5];
			passwordDocument = (object)paramsArray[6];
			passwordTemplate = (object)paramsArray[7];
			revert = (object)paramsArray[8];
			writePasswordDocument = (object)paramsArray[9];
			writePasswordTemplate = (object)paramsArray[10];
			connection = (object)paramsArray[11];
			sQLStatement = (object)paramsArray[12];
			sQLStatement1 = (object)paramsArray[13];
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="ConfirmConversions">ref optional object ConfirmConversions</param>
		/// <param name="ReadOnly">ref optional object ReadOnly</param>
		/// <param name="LinkToSource">ref optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">ref optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">ref optional object PasswordTemplate</param>
		/// <param name="Revert">ref optional object Revert</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">ref optional object WritePasswordTemplate</param>
		/// <param name="Connection">ref optional object Connection</param>
		/// <param name="SQLStatement">ref optional object SQLStatement</param>
		/// <param name="SQLStatement1">ref optional object SQLStatement1</param>
		/// <param name="OpenExclusive">ref optional object OpenExclusive</param>
		/// <param name="SubType">ref optional object SubType</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void OpenDataSource(string name, ref object format, ref object confirmConversions, ref object readOnly, ref object linkToSource, ref object addToRecentFiles, ref object passwordDocument, ref object passwordTemplate, ref object revert, ref object writePasswordDocument, ref object writePasswordTemplate, ref object connection, ref object sQLStatement, ref object sQLStatement1, ref object openExclusive, ref object subType)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement, sQLStatement1, openExclusive, subType);
			Invoker.Method(this, "OpenDataSource", paramsArray, modifiers);
			format = (object)paramsArray[1];
			confirmConversions = (object)paramsArray[2];
			readOnly = (object)paramsArray[3];
			linkToSource = (object)paramsArray[4];
			addToRecentFiles = (object)paramsArray[5];
			passwordDocument = (object)paramsArray[6];
			passwordTemplate = (object)paramsArray[7];
			revert = (object)paramsArray[8];
			writePasswordDocument = (object)paramsArray[9];
			writePasswordTemplate = (object)paramsArray[10];
			connection = (object)paramsArray[11];
			sQLStatement = (object)paramsArray[12];
			sQLStatement1 = (object)paramsArray[13];
			openExclusive = (object)paramsArray[14];
			subType = (object)paramsArray[15];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void OpenDataSource(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="ConfirmConversions">ref optional object ConfirmConversions</param>
		/// <param name="ReadOnly">ref optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">ref optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">ref optional object PasswordTemplate</param>
		/// <param name="Revert">ref optional object Revert</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">ref optional object WritePasswordTemplate</param>
		[SupportByLibrary("WD09")]
		public void OpenHeaderSource(string name, ref object format, ref object confirmConversions, ref object readOnly, ref object addToRecentFiles, ref object passwordDocument, ref object passwordTemplate, ref object revert, ref object writePasswordDocument, ref object writePasswordTemplate)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate);
			Invoker.Method(this, "OpenHeaderSource", paramsArray, modifiers);
			format = (object)paramsArray[1];
			confirmConversions = (object)paramsArray[2];
			readOnly = (object)paramsArray[3];
			addToRecentFiles = (object)paramsArray[4];
			passwordDocument = (object)paramsArray[5];
			passwordTemplate = (object)paramsArray[6];
			revert = (object)paramsArray[7];
			writePasswordDocument = (object)paramsArray[8];
			writePasswordTemplate = (object)paramsArray[9];
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="ConfirmConversions">ref optional object ConfirmConversions</param>
		/// <param name="ReadOnly">ref optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">ref optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">ref optional object PasswordTemplate</param>
		/// <param name="Revert">ref optional object Revert</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">ref optional object WritePasswordTemplate</param>
		/// <param name="OpenExclusive">ref optional object OpenExclusive</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void OpenHeaderSource(string name, ref object format, ref object confirmConversions, ref object readOnly, ref object addToRecentFiles, ref object passwordDocument, ref object passwordTemplate, ref object revert, ref object writePasswordDocument, ref object writePasswordTemplate, ref object openExclusive)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, openExclusive);
			Invoker.Method(this, "OpenHeaderSource", paramsArray, modifiers);
			format = (object)paramsArray[1];
			confirmConversions = (object)paramsArray[2];
			readOnly = (object)paramsArray[3];
			addToRecentFiles = (object)paramsArray[4];
			passwordDocument = (object)paramsArray[5];
			passwordTemplate = (object)paramsArray[6];
			revert = (object)paramsArray[7];
			writePasswordDocument = (object)paramsArray[8];
			writePasswordTemplate = (object)paramsArray[9];
			openExclusive = (object)paramsArray[10];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void OpenHeaderSource(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Pause">ref optional object Pause</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Execute(ref object pause)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(pause);
			Invoker.Method(this, "Execute", paramsArray, modifiers);
			pause = (object)paramsArray[0];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Execute()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Execute", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Check()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Check", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void EditDataSource()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "EditDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void EditHeaderSource()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "EditHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void EditMainDocument()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "EditMainDocument", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Type">string Type</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void UseAddressBook(string type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			Invoker.Method(this, "UseAddressBook", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="ConfirmConversions">ref optional object ConfirmConversions</param>
		/// <param name="ReadOnly">ref optional object ReadOnly</param>
		/// <param name="LinkToSource">ref optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">ref optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">ref optional object PasswordTemplate</param>
		/// <param name="Revert">ref optional object Revert</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">ref optional object WritePasswordTemplate</param>
		/// <param name="Connection">ref optional object Connection</param>
		/// <param name="SQLStatement">ref optional object SQLStatement</param>
		/// <param name="SQLStatement1">ref optional object SQLStatement1</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void OpenDataSource2000(string name, ref object format, ref object confirmConversions, ref object readOnly, ref object linkToSource, ref object addToRecentFiles, ref object passwordDocument, ref object passwordTemplate, ref object revert, ref object writePasswordDocument, ref object writePasswordTemplate, ref object connection, ref object sQLStatement, ref object sQLStatement1)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement, sQLStatement1);
			Invoker.Method(this, "OpenDataSource2000", paramsArray, modifiers);
			format = (object)paramsArray[1];
			confirmConversions = (object)paramsArray[2];
			readOnly = (object)paramsArray[3];
			linkToSource = (object)paramsArray[4];
			addToRecentFiles = (object)paramsArray[5];
			passwordDocument = (object)paramsArray[6];
			passwordTemplate = (object)paramsArray[7];
			revert = (object)paramsArray[8];
			writePasswordDocument = (object)paramsArray[9];
			writePasswordTemplate = (object)paramsArray[10];
			connection = (object)paramsArray[11];
			sQLStatement = (object)paramsArray[12];
			sQLStatement1 = (object)paramsArray[13];
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void OpenDataSource2000(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="ConfirmConversions">ref optional object ConfirmConversions</param>
		/// <param name="ReadOnly">ref optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">ref optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">ref optional object PasswordTemplate</param>
		/// <param name="Revert">ref optional object Revert</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">ref optional object WritePasswordTemplate</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void OpenHeaderSource2000(string name, ref object format, ref object confirmConversions, ref object readOnly, ref object addToRecentFiles, ref object passwordDocument, ref object passwordTemplate, ref object revert, ref object writePasswordDocument, ref object writePasswordTemplate)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray, modifiers);
			format = (object)paramsArray[1];
			confirmConversions = (object)paramsArray[2];
			readOnly = (object)paramsArray[3];
			addToRecentFiles = (object)paramsArray[4];
			passwordDocument = (object)paramsArray[5];
			passwordTemplate = (object)paramsArray[6];
			revert = (object)paramsArray[7];
			writePasswordDocument = (object)paramsArray[8];
			writePasswordTemplate = (object)paramsArray[9];
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Name">string Name</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void OpenHeaderSource2000(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="InitialState">ref object InitialState</param>
		/// <param name="ShowDocumentStep">ref optional object ShowDocumentStep</param>
		/// <param name="ShowTemplateStep">ref optional object ShowTemplateStep</param>
		/// <param name="ShowDataStep">ref optional object ShowDataStep</param>
		/// <param name="ShowWriteStep">ref optional object ShowWriteStep</param>
		/// <param name="ShowPreviewStep">ref optional object ShowPreviewStep</param>
		/// <param name="ShowMergeStep">ref optional object ShowMergeStep</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void ShowWizard(ref object initialState, ref object showDocumentStep, ref object showTemplateStep, ref object showDataStep, ref object showWriteStep, ref object showPreviewStep, ref object showMergeStep)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(initialState, showDocumentStep, showTemplateStep, showDataStep, showWriteStep, showPreviewStep, showMergeStep);
			Invoker.Method(this, "ShowWizard", paramsArray, modifiers);
			initialState = (object)paramsArray[0];
			showDocumentStep = (object)paramsArray[1];
			showTemplateStep = (object)paramsArray[2];
			showDataStep = (object)paramsArray[3];
			showWriteStep = (object)paramsArray[4];
			showPreviewStep = (object)paramsArray[5];
			showMergeStep = (object)paramsArray[6];
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="InitialState">ref object InitialState</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void ShowWizard(ref object initialState)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(initialState);
			Invoker.Method(this, "ShowWizard", paramsArray, modifiers);
			initialState = (object)paramsArray[0];
		}

		#endregion
		#pragma warning restore
	}
}