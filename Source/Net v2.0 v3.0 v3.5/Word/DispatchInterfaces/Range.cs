//Generated by LateBindingApi.CodeGenerator
using System;
using NetRuntimeSystem = System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Reflection;
using LateBindingApi.Core;
namespace NetOffice.WordApi
{
	///<summary>
	/// DispatchInterface Range SupportByLibrary WD09 WD10 WD11 WD12 WD14 
	///</summary>
	[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
	public class Range : COMObject
	{
		#pragma warning disable
		#region Construction

        /// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Range(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}
		
		/// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        /// <param name="comProxyType">Type of inner wrapped COM proxy"</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Range(COMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}
		
		/// <param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Range(COMObject replacedObject) : base(replacedObject)
		{
		}
		
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public Range()
		{
		}
		
		#endregion
		
		#region Properties

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public string Text
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Text", paramsArray);
				return (string)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Text", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range FormattedText
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "FormattedText", paramsArray);
				NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Range;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "FormattedText", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Start
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Start", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Start", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 End
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "End", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "End", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Font Font
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Font", paramsArray);
				NetOffice.WordApi.Font newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Font;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Font", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range Duplicate
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Duplicate", paramsArray);
				NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Range;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdStoryType StoryType
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "StoryType", paramsArray);
				return (NetOffice.WordApi.Enums.WdStoryType)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Tables Tables
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Tables", paramsArray);
				NetOffice.WordApi.Tables newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Tables;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Words Words
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Words", paramsArray);
				NetOffice.WordApi.Words newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Words;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Sentences Sentences
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Sentences", paramsArray);
				NetOffice.WordApi.Sentences newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Sentences;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Characters Characters
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Characters", paramsArray);
				NetOffice.WordApi.Characters newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Characters;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Footnotes Footnotes
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Footnotes", paramsArray);
				NetOffice.WordApi.Footnotes newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Footnotes;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Endnotes Endnotes
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Endnotes", paramsArray);
				NetOffice.WordApi.Endnotes newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Endnotes;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Comments Comments
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Comments", paramsArray);
				NetOffice.WordApi.Comments newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Comments;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Cells Cells
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Cells", paramsArray);
				NetOffice.WordApi.Cells newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Cells;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Sections Sections
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Sections", paramsArray);
				NetOffice.WordApi.Sections newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Sections;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Paragraphs Paragraphs
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Paragraphs", paramsArray);
				NetOffice.WordApi.Paragraphs newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Paragraphs;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Borders Borders
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Borders", paramsArray);
				NetOffice.WordApi.Borders newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Borders;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Borders", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Shading Shading
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Shading", paramsArray);
				NetOffice.WordApi.Shading newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Shading;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.TextRetrievalMode TextRetrievalMode
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "TextRetrievalMode", paramsArray);
				NetOffice.WordApi.TextRetrievalMode newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.TextRetrievalMode;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "TextRetrievalMode", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Fields Fields
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Fields", paramsArray);
				NetOffice.WordApi.Fields newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Fields;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.FormFields FormFields
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "FormFields", paramsArray);
				NetOffice.WordApi.FormFields newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.FormFields;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Frames Frames
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Frames", paramsArray);
				NetOffice.WordApi.Frames newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Frames;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.ParagraphFormat ParagraphFormat
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ParagraphFormat", paramsArray);
				NetOffice.WordApi.ParagraphFormat newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ParagraphFormat;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "ParagraphFormat", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.ListFormat ListFormat
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ListFormat", paramsArray);
				NetOffice.WordApi.ListFormat newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ListFormat;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Bookmarks Bookmarks
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Bookmarks", paramsArray);
				NetOffice.WordApi.Bookmarks newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Bookmarks;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Application Application
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Application", paramsArray);
				NetOffice.WordApi.Application newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Application;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Creator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Creator", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public COMObject Parent
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Parent", paramsArray);
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem);
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Bold
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Bold", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Bold", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Italic
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Italic", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Italic", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdUnderline Underline
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Underline", paramsArray);
				return (NetOffice.WordApi.Enums.WdUnderline)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Underline", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdEmphasisMark EmphasisMark
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "EmphasisMark", paramsArray);
				return (NetOffice.WordApi.Enums.WdEmphasisMark)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "EmphasisMark", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool DisableCharacterSpaceGrid
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "DisableCharacterSpaceGrid", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "DisableCharacterSpaceGrid", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Revisions Revisions
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Revisions", paramsArray);
				NetOffice.WordApi.Revisions newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Revisions;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public object Style
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Style", paramsArray);
				Type returnItemType = returnItem.GetType();
				if(true == returnItemType.IsCOMObject)
				{
					COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem, returnItemType);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Style", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 StoryLength
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "StoryLength", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdLanguageID LanguageID
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "LanguageID", paramsArray);
				return (NetOffice.WordApi.Enums.WdLanguageID)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "LanguageID", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.SynonymInfo SynonymInfo
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "SynonymInfo", paramsArray);
				NetOffice.WordApi.SynonymInfo newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.SynonymInfo;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Hyperlinks Hyperlinks
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Hyperlinks", paramsArray);
				NetOffice.WordApi.Hyperlinks newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Hyperlinks;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.ListParagraphs ListParagraphs
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ListParagraphs", paramsArray);
				NetOffice.WordApi.ListParagraphs newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ListParagraphs;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Subdocuments Subdocuments
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Subdocuments", paramsArray);
				NetOffice.WordApi.Subdocuments newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Subdocuments;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool GrammarChecked
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "GrammarChecked", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "GrammarChecked", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool SpellingChecked
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "SpellingChecked", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "SpellingChecked", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdColorIndex HighlightColorIndex
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "HighlightColorIndex", paramsArray);
				return (NetOffice.WordApi.Enums.WdColorIndex)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "HighlightColorIndex", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Columns Columns
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Columns", paramsArray);
				NetOffice.WordApi.Columns newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Columns;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Rows Rows
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Rows", paramsArray);
				NetOffice.WordApi.Rows newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Rows;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 CanEdit
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "CanEdit", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 CanPaste
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "CanPaste", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool IsEndOfRowMark
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "IsEndOfRowMark", paramsArray);
				return (bool)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 BookmarkID
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "BookmarkID", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 PreviousBookmarkID
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "PreviousBookmarkID", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Find Find
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Find", paramsArray);
				NetOffice.WordApi.Find newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Find;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.PageSetup PageSetup
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "PageSetup", paramsArray);
				NetOffice.WordApi.PageSetup newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.PageSetup;
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "PageSetup", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.ShapeRange ShapeRange
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ShapeRange", paramsArray);
				NetOffice.WordApi.ShapeRange newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ShapeRange;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdCharacterCase Case
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Case", paramsArray);
				return (NetOffice.WordApi.Enums.WdCharacterCase)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Case", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Type">NetOffice.WordApi.Enums.WdInformation Type</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public object get_Information(NetOffice.WordApi.Enums.WdInformation type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			object returnItem = Invoker.PropertyGet(this, "Information", paramsArray);
			Type returnItemType = returnItem.GetType();
			if(true == returnItemType.IsCOMObject)
			{
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem, returnItemType);
				return newObject;
			}
			else
			{
				return  returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.ReadabilityStatistics ReadabilityStatistics
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ReadabilityStatistics", paramsArray);
				NetOffice.WordApi.ReadabilityStatistics newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ReadabilityStatistics;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.ProofreadingErrors GrammaticalErrors
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "GrammaticalErrors", paramsArray);
				NetOffice.WordApi.ProofreadingErrors newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ProofreadingErrors;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.ProofreadingErrors SpellingErrors
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "SpellingErrors", paramsArray);
				NetOffice.WordApi.ProofreadingErrors newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ProofreadingErrors;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdTextOrientation Orientation
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Orientation", paramsArray);
				return (NetOffice.WordApi.Enums.WdTextOrientation)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Orientation", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.InlineShapes InlineShapes
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "InlineShapes", paramsArray);
				NetOffice.WordApi.InlineShapes newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.InlineShapes;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range NextStoryRange
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "NextStoryRange", paramsArray);
				NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Range;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdLanguageID LanguageIDFarEast
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "LanguageIDFarEast", paramsArray);
				return (NetOffice.WordApi.Enums.WdLanguageID)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "LanguageIDFarEast", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdLanguageID LanguageIDOther
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "LanguageIDOther", paramsArray);
				return (NetOffice.WordApi.Enums.WdLanguageID)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "LanguageIDOther", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool LanguageDetected
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "LanguageDetected", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "LanguageDetected", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Single FitTextWidth
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "FitTextWidth", paramsArray);
				return (Single)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "FitTextWidth", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdHorizontalInVerticalType HorizontalInVertical
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "HorizontalInVertical", paramsArray);
				return (NetOffice.WordApi.Enums.WdHorizontalInVerticalType)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "HorizontalInVertical", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdTwoLinesInOneType TwoLinesInOne
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "TwoLinesInOne", paramsArray);
				return (NetOffice.WordApi.Enums.WdTwoLinesInOneType)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "TwoLinesInOne", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool CombineCharacters
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "CombineCharacters", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "CombineCharacters", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 NoProofing
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "NoProofing", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "NoProofing", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Tables TopLevelTables
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "TopLevelTables", paramsArray);
				NetOffice.WordApi.Tables newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Tables;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.OfficeApi.Scripts Scripts
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Scripts", paramsArray);
				NetOffice.OfficeApi.Scripts newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.OfficeApi.Scripts;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdCharacterWidth CharacterWidth
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "CharacterWidth", paramsArray);
				return (NetOffice.WordApi.Enums.WdCharacterWidth)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "CharacterWidth", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Enums.WdKana Kana
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Kana", paramsArray);
				return (NetOffice.WordApi.Enums.WdKana)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Kana", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 BoldBi
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "BoldBi", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "BoldBi", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 ItalicBi
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ItalicBi", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "ItalicBi", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public string ID
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ID", paramsArray);
				return (string)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "ID", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.HTMLDivisions HTMLDivisions
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "HTMLDivisions", paramsArray);
				NetOffice.WordApi.HTMLDivisions newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.HTMLDivisions;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.SmartTags SmartTags
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "SmartTags", paramsArray);
				NetOffice.WordApi.SmartTags newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.SmartTags;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public bool ShowAll
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ShowAll", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "ShowAll", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Document Document
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Document", paramsArray);
				NetOffice.WordApi.Document newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Document;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.FootnoteOptions FootnoteOptions
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "FootnoteOptions", paramsArray);
				NetOffice.WordApi.FootnoteOptions newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.FootnoteOptions;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.EndnoteOptions EndnoteOptions
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "EndnoteOptions", paramsArray);
				NetOffice.WordApi.EndnoteOptions newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.EndnoteOptions;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD11","WD12","WD14")]
		public NetOffice.WordApi.XMLNodes XMLNodes
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "XMLNodes", paramsArray);
				NetOffice.WordApi.XMLNodes newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.XMLNodes;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD11","WD12","WD14")]
		public NetOffice.WordApi.XMLNode XMLParentNode
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "XMLParentNode", paramsArray);
				NetOffice.WordApi.XMLNode newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.XMLNode;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD11","WD12","WD14")]
		public NetOffice.WordApi.Editors Editors
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Editors", paramsArray);
				NetOffice.WordApi.Editors newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Editors;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="DataOnly">bool DataOnly</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public string get_XML(bool dataOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(dataOnly);
			object returnItem = Invoker.PropertyGet(this, "XML", paramsArray);
			return (string)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD11","WD12","WD14")]
		public object EnhMetaFileBits
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "EnhMetaFileBits", paramsArray);
				Type returnItemType = returnItem.GetType();
				if(true == returnItemType.IsCOMObject)
				{
					COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem, returnItemType);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD12","WD14")]
		public NetOffice.WordApi.OMaths OMaths
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "OMaths", paramsArray);
				NetOffice.WordApi.OMaths newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.OMaths;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD12","WD14")]
		public object CharacterStyle
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "CharacterStyle", paramsArray);
				Type returnItemType = returnItem.GetType();
				if(true == returnItemType.IsCOMObject)
				{
					COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem, returnItemType);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD12","WD14")]
		public object ParagraphStyle
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ParagraphStyle", paramsArray);
				Type returnItemType = returnItem.GetType();
				if(true == returnItemType.IsCOMObject)
				{
					COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem, returnItemType);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD12","WD14")]
		public object ListStyle
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ListStyle", paramsArray);
				Type returnItemType = returnItem.GetType();
				if(true == returnItemType.IsCOMObject)
				{
					COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem, returnItemType);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD12","WD14")]
		public object TableStyle
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "TableStyle", paramsArray);
				Type returnItemType = returnItem.GetType();
				if(true == returnItemType.IsCOMObject)
				{
					COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem, returnItemType);
					return newObject;
				}
				else
				{
					return  returnItem;
				}
			}
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD12","WD14")]
		public NetOffice.WordApi.ContentControls ContentControls
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ContentControls", paramsArray);
				NetOffice.WordApi.ContentControls newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ContentControls;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD12","WD14")]
		public string WordOpenXML
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "WordOpenXML", paramsArray);
				return (string)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD12","WD14")]
		public NetOffice.WordApi.ContentControl ParentContentControl
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ParentContentControl", paramsArray);
				NetOffice.WordApi.ContentControl newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.ContentControl;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD14 
		/// </summary>
		[SupportByLibrary("WD14")]
		public NetOffice.WordApi.CoAuthLocks Locks
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Locks", paramsArray);
				NetOffice.WordApi.CoAuthLocks newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.CoAuthLocks;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD14 
		/// </summary>
		[SupportByLibrary("WD14")]
		public NetOffice.WordApi.CoAuthUpdates Updates
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Updates", paramsArray);
				NetOffice.WordApi.CoAuthUpdates newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.CoAuthUpdates;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary WD14 
		/// </summary>
		[SupportByLibrary("WD14")]
		public NetOffice.WordApi.Conflicts Conflicts
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Conflicts", paramsArray);
				NetOffice.WordApi.Conflicts newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem) as NetOffice.WordApi.Conflicts;
				return newObject;
			}
		}

		#endregion

		#region Methods

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Select()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Select", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Start">Int32 Start</param>
		/// <param name="End">Int32 End</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void SetRange(Int32 start, Int32 end)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(start, end);
			Invoker.Method(this, "SetRange", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Direction">ref optional object Direction</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Collapse(ref object direction)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(direction);
			Invoker.Method(this, "Collapse", paramsArray, modifiers);
			direction = (object)paramsArray[0];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Collapse()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Collapse", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Text">string Text</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertBefore(string text)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(text);
			Invoker.Method(this, "InsertBefore", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Text">string Text</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertAfter(string text)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(text);
			Invoker.Method(this, "InsertAfter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range Next(ref object unit, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit, count);
			object returnItem = Invoker.MethodReturn(this, "Next", paramsArray, modifiers);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			unit = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range Next()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "Next", paramsArray);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range Previous(ref object unit, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit, count);
			object returnItem = Invoker.MethodReturn(this, "Previous", paramsArray, modifiers);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			unit = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range Previous()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "Previous", paramsArray);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		/// <param name="Extend">ref optional object Extend</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 StartOf(ref object unit, ref object extend)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit, extend);
			object returnItem = Invoker.MethodReturn(this, "StartOf", paramsArray);
			unit = (object)paramsArray[0];
			extend = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 StartOf()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "StartOf", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		/// <param name="Extend">ref optional object Extend</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 EndOf(ref object unit, ref object extend)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit, extend);
			object returnItem = Invoker.MethodReturn(this, "EndOf", paramsArray);
			unit = (object)paramsArray[0];
			extend = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 EndOf()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "EndOf", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Move(ref object unit, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit, count);
			object returnItem = Invoker.MethodReturn(this, "Move", paramsArray);
			unit = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Move()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "Move", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveStart(ref object unit, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit, count);
			object returnItem = Invoker.MethodReturn(this, "MoveStart", paramsArray);
			unit = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveStart()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "MoveStart", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveEnd(ref object unit, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit, count);
			object returnItem = Invoker.MethodReturn(this, "MoveEnd", paramsArray);
			unit = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveEnd()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "MoveEnd", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveWhile(ref object cset, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset, count);
			object returnItem = Invoker.MethodReturn(this, "MoveWhile", paramsArray);
			cset = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveWhile(ref object cset)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset);
			object returnItem = Invoker.MethodReturn(this, "MoveWhile", paramsArray);
			cset = (object)paramsArray[0];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveStartWhile(ref object cset, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset, count);
			object returnItem = Invoker.MethodReturn(this, "MoveStartWhile", paramsArray);
			cset = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveStartWhile(ref object cset)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset);
			object returnItem = Invoker.MethodReturn(this, "MoveStartWhile", paramsArray);
			cset = (object)paramsArray[0];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveEndWhile(ref object cset, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset, count);
			object returnItem = Invoker.MethodReturn(this, "MoveEndWhile", paramsArray);
			cset = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveEndWhile(ref object cset)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset);
			object returnItem = Invoker.MethodReturn(this, "MoveEndWhile", paramsArray);
			cset = (object)paramsArray[0];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveUntil(ref object cset, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset, count);
			object returnItem = Invoker.MethodReturn(this, "MoveUntil", paramsArray);
			cset = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveUntil(ref object cset)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset);
			object returnItem = Invoker.MethodReturn(this, "MoveUntil", paramsArray);
			cset = (object)paramsArray[0];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveStartUntil(ref object cset, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset, count);
			object returnItem = Invoker.MethodReturn(this, "MoveStartUntil", paramsArray);
			cset = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveStartUntil(ref object cset)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset);
			object returnItem = Invoker.MethodReturn(this, "MoveStartUntil", paramsArray);
			cset = (object)paramsArray[0];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveEndUntil(ref object cset, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset, count);
			object returnItem = Invoker.MethodReturn(this, "MoveEndUntil", paramsArray);
			cset = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Cset">ref object Cset</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 MoveEndUntil(ref object cset)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(cset);
			object returnItem = Invoker.MethodReturn(this, "MoveEndUntil", paramsArray);
			cset = (object)paramsArray[0];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Cut()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Cut", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Copy()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Copy", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Paste()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Paste", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Type">ref optional object Type</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertBreak(ref object type)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			Invoker.Method(this, "InsertBreak", paramsArray, modifiers);
			type = (object)paramsArray[0];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertBreak()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "InsertBreak", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="FileName">string FileName</param>
		/// <param name="Range">ref optional object Range</param>
		/// <param name="ConfirmConversions">ref optional object ConfirmConversions</param>
		/// <param name="Link">ref optional object Link</param>
		/// <param name="Attachment">ref optional object Attachment</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertFile(string fileName, ref object range, ref object confirmConversions, ref object link, ref object attachment)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(fileName, range, confirmConversions, link, attachment);
			Invoker.Method(this, "InsertFile", paramsArray, modifiers);
			range = (object)paramsArray[1];
			confirmConversions = (object)paramsArray[2];
			link = (object)paramsArray[3];
			attachment = (object)paramsArray[4];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="FileName">string FileName</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertFile(string fileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName);
			Invoker.Method(this, "InsertFile", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Range">NetOffice.WordApi.Range Range</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool InStory(NetOffice.WordApi.Range range)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(range);
			object returnItem = Invoker.MethodReturn(this, "InStory", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Range">NetOffice.WordApi.Range Range</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool InRange(NetOffice.WordApi.Range range)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(range);
			object returnItem = Invoker.MethodReturn(this, "InRange", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		/// <param name="Count">ref optional object Count</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Delete(ref object unit, ref object count)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit, count);
			object returnItem = Invoker.MethodReturn(this, "Delete", paramsArray);
			unit = (object)paramsArray[0];
			count = (object)paramsArray[1];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Delete()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "Delete", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void WholeStory()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "WholeStory", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Unit">ref optional object Unit</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Expand(ref object unit)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(unit);
			object returnItem = Invoker.MethodReturn(this, "Expand", paramsArray);
			unit = (object)paramsArray[0];
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 Expand()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "Expand", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertParagraph()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "InsertParagraph", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertParagraphAfter()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "InsertParagraphAfter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Separator">ref optional object Separator</param>
		/// <param name="NumRows">ref optional object NumRows</param>
		/// <param name="NumColumns">ref optional object NumColumns</param>
		/// <param name="InitialColumnWidth">ref optional object InitialColumnWidth</param>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="ApplyBorders">ref optional object ApplyBorders</param>
		/// <param name="ApplyShading">ref optional object ApplyShading</param>
		/// <param name="ApplyFont">ref optional object ApplyFont</param>
		/// <param name="ApplyColor">ref optional object ApplyColor</param>
		/// <param name="ApplyHeadingRows">ref optional object ApplyHeadingRows</param>
		/// <param name="ApplyLastRow">ref optional object ApplyLastRow</param>
		/// <param name="ApplyFirstColumn">ref optional object ApplyFirstColumn</param>
		/// <param name="ApplyLastColumn">ref optional object ApplyLastColumn</param>
		/// <param name="AutoFit">ref optional object AutoFit</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Table ConvertToTableOld(ref object separator, ref object numRows, ref object numColumns, ref object initialColumnWidth, ref object format, ref object applyBorders, ref object applyShading, ref object applyFont, ref object applyColor, ref object applyHeadingRows, ref object applyLastRow, ref object applyFirstColumn, ref object applyLastColumn, ref object autoFit)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(separator, numRows, numColumns, initialColumnWidth, format, applyBorders, applyShading, applyFont, applyColor, applyHeadingRows, applyLastRow, applyFirstColumn, applyLastColumn, autoFit);
			object returnItem = Invoker.MethodReturn(this, "ConvertToTableOld", paramsArray, modifiers);
			NetOffice.WordApi.Table newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Table;
			separator = (object)paramsArray[0];
			numRows = (object)paramsArray[1];
			numColumns = (object)paramsArray[2];
			initialColumnWidth = (object)paramsArray[3];
			format = (object)paramsArray[4];
			applyBorders = (object)paramsArray[5];
			applyShading = (object)paramsArray[6];
			applyFont = (object)paramsArray[7];
			applyColor = (object)paramsArray[8];
			applyHeadingRows = (object)paramsArray[9];
			applyLastRow = (object)paramsArray[10];
			applyFirstColumn = (object)paramsArray[11];
			applyLastColumn = (object)paramsArray[12];
			autoFit = (object)paramsArray[13];
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Table ConvertToTableOld()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "ConvertToTableOld", paramsArray);
			NetOffice.WordApi.Table newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Table;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="DateTimeFormat">ref optional object DateTimeFormat</param>
		/// <param name="InsertAsField">ref optional object InsertAsField</param>
		/// <param name="InsertAsFullWidth">ref optional object InsertAsFullWidth</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertDateTimeOld(ref object dateTimeFormat, ref object insertAsField, ref object insertAsFullWidth)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(dateTimeFormat, insertAsField, insertAsFullWidth);
			Invoker.Method(this, "InsertDateTimeOld", paramsArray, modifiers);
			dateTimeFormat = (object)paramsArray[0];
			insertAsField = (object)paramsArray[1];
			insertAsFullWidth = (object)paramsArray[2];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertDateTimeOld()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "InsertDateTimeOld", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="CharacterNumber">Int32 CharacterNumber</param>
		/// <param name="Font">ref optional object Font</param>
		/// <param name="Unicode">ref optional object Unicode</param>
		/// <param name="Bias">ref optional object Bias</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertSymbol(Int32 characterNumber, ref object font, ref object unicode, ref object bias)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(characterNumber, font, unicode, bias);
			Invoker.Method(this, "InsertSymbol", paramsArray, modifiers);
			font = (object)paramsArray[1];
			unicode = (object)paramsArray[2];
			bias = (object)paramsArray[3];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="CharacterNumber">Int32 CharacterNumber</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertSymbol(Int32 characterNumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(characterNumber);
			Invoker.Method(this, "InsertSymbol", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 
		/// </summary>
		/// <param name="ReferenceType">ref object ReferenceType</param>
		/// <param name="ReferenceKind">NetOffice.WordApi.Enums.WdReferenceKind ReferenceKind</param>
		/// <param name="ReferenceItem">ref object ReferenceItem</param>
		/// <param name="InsertAsHyperlink">ref optional object InsertAsHyperlink</param>
		/// <param name="IncludePosition">ref optional object IncludePosition</param>
		[SupportByLibrary("WD09","WD10")]
		public void InsertCrossReference(ref object referenceType, NetOffice.WordApi.Enums.WdReferenceKind referenceKind, ref object referenceItem, ref object insertAsHyperlink, ref object includePosition)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,false,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(referenceType, referenceKind, referenceItem, insertAsHyperlink, includePosition);
			Invoker.Method(this, "InsertCrossReference", paramsArray, modifiers);
			referenceType = (object)paramsArray[0];
			referenceItem = (object)paramsArray[2];
			insertAsHyperlink = (object)paramsArray[3];
			includePosition = (object)paramsArray[4];
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="ReferenceType">ref object ReferenceType</param>
		/// <param name="ReferenceKind">NetOffice.WordApi.Enums.WdReferenceKind ReferenceKind</param>
		/// <param name="ReferenceItem">ref object ReferenceItem</param>
		/// <param name="InsertAsHyperlink">ref optional object InsertAsHyperlink</param>
		/// <param name="IncludePosition">ref optional object IncludePosition</param>
		/// <param name="SeparateNumbers">ref optional object SeparateNumbers</param>
		/// <param name="SeparatorString">ref optional object SeparatorString</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public void InsertCrossReference(ref object referenceType, NetOffice.WordApi.Enums.WdReferenceKind referenceKind, ref object referenceItem, ref object insertAsHyperlink, ref object includePosition, ref object separateNumbers, ref object separatorString)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,false,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(referenceType, referenceKind, referenceItem, insertAsHyperlink, includePosition, separateNumbers, separatorString);
			Invoker.Method(this, "InsertCrossReference", paramsArray, modifiers);
			referenceType = (object)paramsArray[0];
			referenceItem = (object)paramsArray[2];
			insertAsHyperlink = (object)paramsArray[3];
			includePosition = (object)paramsArray[4];
			separateNumbers = (object)paramsArray[5];
			separatorString = (object)paramsArray[6];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="ReferenceType">ref object ReferenceType</param>
		/// <param name="ReferenceKind">NetOffice.WordApi.Enums.WdReferenceKind ReferenceKind</param>
		/// <param name="ReferenceItem">ref object ReferenceItem</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertCrossReference(ref object referenceType, NetOffice.WordApi.Enums.WdReferenceKind referenceKind, ref object referenceItem)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,false,true);
			object[] paramsArray = Invoker.ValidateParamsArray(referenceType, referenceKind, referenceItem);
			Invoker.Method(this, "InsertCrossReference", paramsArray, modifiers);
			referenceType = (object)paramsArray[0];
			referenceItem = (object)paramsArray[2];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 
		/// </summary>
		/// <param name="Label">ref object Label</param>
		/// <param name="Title">ref optional object Title</param>
		/// <param name="TitleAutoText">ref optional object TitleAutoText</param>
		/// <param name="Position">ref optional object Position</param>
		[SupportByLibrary("WD09","WD10")]
		public void InsertCaption(ref object label, ref object title, ref object titleAutoText, ref object position)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(label, title, titleAutoText, position);
			Invoker.Method(this, "InsertCaption", paramsArray, modifiers);
			label = (object)paramsArray[0];
			title = (object)paramsArray[1];
			titleAutoText = (object)paramsArray[2];
			position = (object)paramsArray[3];
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="Label">ref object Label</param>
		/// <param name="Title">ref optional object Title</param>
		/// <param name="TitleAutoText">ref optional object TitleAutoText</param>
		/// <param name="Position">ref optional object Position</param>
		/// <param name="ExcludeLabel">ref optional object ExcludeLabel</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public void InsertCaption(ref object label, ref object title, ref object titleAutoText, ref object position, ref object excludeLabel)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(label, title, titleAutoText, position, excludeLabel);
			Invoker.Method(this, "InsertCaption", paramsArray, modifiers);
			label = (object)paramsArray[0];
			title = (object)paramsArray[1];
			titleAutoText = (object)paramsArray[2];
			position = (object)paramsArray[3];
			excludeLabel = (object)paramsArray[4];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Label">ref object Label</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertCaption(ref object label)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(label);
			Invoker.Method(this, "InsertCaption", paramsArray, modifiers);
			label = (object)paramsArray[0];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CopyAsPicture()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CopyAsPicture", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="ExcludeHeader">ref optional object ExcludeHeader</param>
		/// <param name="FieldNumber">ref optional object FieldNumber</param>
		/// <param name="SortFieldType">ref optional object SortFieldType</param>
		/// <param name="SortOrder">ref optional object SortOrder</param>
		/// <param name="FieldNumber2">ref optional object FieldNumber2</param>
		/// <param name="SortFieldType2">ref optional object SortFieldType2</param>
		/// <param name="SortOrder2">ref optional object SortOrder2</param>
		/// <param name="FieldNumber3">ref optional object FieldNumber3</param>
		/// <param name="SortFieldType3">ref optional object SortFieldType3</param>
		/// <param name="SortOrder3">ref optional object SortOrder3</param>
		/// <param name="SortColumn">ref optional object SortColumn</param>
		/// <param name="Separator">ref optional object Separator</param>
		/// <param name="CaseSensitive">ref optional object CaseSensitive</param>
		/// <param name="LanguageID">ref optional object LanguageID</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void SortOld(ref object excludeHeader, ref object fieldNumber, ref object sortFieldType, ref object sortOrder, ref object fieldNumber2, ref object sortFieldType2, ref object sortOrder2, ref object fieldNumber3, ref object sortFieldType3, ref object sortOrder3, ref object sortColumn, ref object separator, ref object caseSensitive, ref object languageID)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(excludeHeader, fieldNumber, sortFieldType, sortOrder, fieldNumber2, sortFieldType2, sortOrder2, fieldNumber3, sortFieldType3, sortOrder3, sortColumn, separator, caseSensitive, languageID);
			Invoker.Method(this, "SortOld", paramsArray, modifiers);
			excludeHeader = (object)paramsArray[0];
			fieldNumber = (object)paramsArray[1];
			sortFieldType = (object)paramsArray[2];
			sortOrder = (object)paramsArray[3];
			fieldNumber2 = (object)paramsArray[4];
			sortFieldType2 = (object)paramsArray[5];
			sortOrder2 = (object)paramsArray[6];
			fieldNumber3 = (object)paramsArray[7];
			sortFieldType3 = (object)paramsArray[8];
			sortOrder3 = (object)paramsArray[9];
			sortColumn = (object)paramsArray[10];
			separator = (object)paramsArray[11];
			caseSensitive = (object)paramsArray[12];
			languageID = (object)paramsArray[13];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void SortOld()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "SortOld", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void SortAscending()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "SortAscending", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void SortDescending()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "SortDescending", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Range">NetOffice.WordApi.Range Range</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public bool IsEqual(NetOffice.WordApi.Range range)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(range);
			object returnItem = Invoker.MethodReturn(this, "IsEqual", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Single Calculate()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "Calculate", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="What">ref optional object What</param>
		/// <param name="Which">ref optional object Which</param>
		/// <param name="Count">ref optional object Count</param>
		/// <param name="Name">ref optional object Name</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range GoTo(ref object what, ref object which, ref object count, ref object name)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(what, which, count, name);
			object returnItem = Invoker.MethodReturn(this, "GoTo", paramsArray, modifiers);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			what = (object)paramsArray[0];
			which = (object)paramsArray[1];
			count = (object)paramsArray[2];
			name = (object)paramsArray[3];
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range GoTo()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "GoTo", paramsArray);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="What">NetOffice.WordApi.Enums.WdGoToItem What</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range GoToNext(NetOffice.WordApi.Enums.WdGoToItem what)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(what);
			object returnItem = Invoker.MethodReturn(this, "GoToNext", paramsArray);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="What">NetOffice.WordApi.Enums.WdGoToItem What</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Range GoToPrevious(NetOffice.WordApi.Enums.WdGoToItem what)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(what);
			object returnItem = Invoker.MethodReturn(this, "GoToPrevious", paramsArray);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="IconIndex">ref optional object IconIndex</param>
		/// <param name="Link">ref optional object Link</param>
		/// <param name="Placement">ref optional object Placement</param>
		/// <param name="DisplayAsIcon">ref optional object DisplayAsIcon</param>
		/// <param name="DataType">ref optional object DataType</param>
		/// <param name="IconFileName">ref optional object IconFileName</param>
		/// <param name="IconLabel">ref optional object IconLabel</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void PasteSpecial(ref object iconIndex, ref object link, ref object placement, ref object displayAsIcon, ref object dataType, ref object iconFileName, ref object iconLabel)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(iconIndex, link, placement, displayAsIcon, dataType, iconFileName, iconLabel);
			Invoker.Method(this, "PasteSpecial", paramsArray, modifiers);
			iconIndex = (object)paramsArray[0];
			link = (object)paramsArray[1];
			placement = (object)paramsArray[2];
			displayAsIcon = (object)paramsArray[3];
			dataType = (object)paramsArray[4];
			iconFileName = (object)paramsArray[5];
			iconLabel = (object)paramsArray[6];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void PasteSpecial()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "PasteSpecial", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void LookupNameProperties()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "LookupNameProperties", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Statistic">NetOffice.WordApi.Enums.WdStatistic Statistic</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public Int32 ComputeStatistics(NetOffice.WordApi.Enums.WdStatistic statistic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(statistic);
			object returnItem = Invoker.MethodReturn(this, "ComputeStatistics", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Direction">Int32 Direction</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Relocate(Int32 direction)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(direction);
			Invoker.Method(this, "Relocate", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CheckSynonyms()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CheckSynonyms", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Edition">string Edition</param>
		/// <param name="Format">ref optional object Format</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void SubscribeTo(string edition, ref object format)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true);
			object[] paramsArray = Invoker.ValidateParamsArray(edition, format);
			Invoker.Method(this, "SubscribeTo", paramsArray, modifiers);
			format = (object)paramsArray[1];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Edition">string Edition</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void SubscribeTo(string edition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(edition);
			Invoker.Method(this, "SubscribeTo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Edition">ref optional object Edition</param>
		/// <param name="ContainsPICT">ref optional object ContainsPICT</param>
		/// <param name="ContainsRTF">ref optional object ContainsRTF</param>
		/// <param name="ContainsText">ref optional object ContainsText</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CreatePublisher(ref object edition, ref object containsPICT, ref object containsRTF, ref object containsText)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(edition, containsPICT, containsRTF, containsText);
			Invoker.Method(this, "CreatePublisher", paramsArray, modifiers);
			edition = (object)paramsArray[0];
			containsPICT = (object)paramsArray[1];
			containsRTF = (object)paramsArray[2];
			containsText = (object)paramsArray[3];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CreatePublisher()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CreatePublisher", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertAutoText()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "InsertAutoText", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="Style">ref optional object Style</param>
		/// <param name="LinkToSource">ref optional object LinkToSource</param>
		/// <param name="Connection">ref optional object Connection</param>
		/// <param name="SQLStatement">ref optional object SQLStatement</param>
		/// <param name="SQLStatement1">ref optional object SQLStatement1</param>
		/// <param name="PasswordDocument">ref optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">ref optional object PasswordTemplate</param>
		/// <param name="WritePasswordDocument">ref optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">ref optional object WritePasswordTemplate</param>
		/// <param name="DataSource">ref optional object DataSource</param>
		/// <param name="From">ref optional object From</param>
		/// <param name="To">ref optional object To</param>
		/// <param name="IncludeFields">ref optional object IncludeFields</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertDatabase(ref object format, ref object style, ref object linkToSource, ref object connection, ref object sQLStatement, ref object sQLStatement1, ref object passwordDocument, ref object passwordTemplate, ref object writePasswordDocument, ref object writePasswordTemplate, ref object dataSource, ref object from, ref object to, ref object includeFields)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(format, style, linkToSource, connection, sQLStatement, sQLStatement1, passwordDocument, passwordTemplate, writePasswordDocument, writePasswordTemplate, dataSource, from, to, includeFields);
			Invoker.Method(this, "InsertDatabase", paramsArray, modifiers);
			format = (object)paramsArray[0];
			style = (object)paramsArray[1];
			linkToSource = (object)paramsArray[2];
			connection = (object)paramsArray[3];
			sQLStatement = (object)paramsArray[4];
			sQLStatement1 = (object)paramsArray[5];
			passwordDocument = (object)paramsArray[6];
			passwordTemplate = (object)paramsArray[7];
			writePasswordDocument = (object)paramsArray[8];
			writePasswordTemplate = (object)paramsArray[9];
			dataSource = (object)paramsArray[10];
			from = (object)paramsArray[11];
			to = (object)paramsArray[12];
			includeFields = (object)paramsArray[13];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertDatabase()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "InsertDatabase", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void AutoFormat()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "AutoFormat", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CheckGrammar()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CheckGrammar", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="CustomDictionary">ref optional object CustomDictionary</param>
		/// <param name="IgnoreUppercase">ref optional object IgnoreUppercase</param>
		/// <param name="AlwaysSuggest">ref optional object AlwaysSuggest</param>
		/// <param name="CustomDictionary2">ref optional object CustomDictionary2</param>
		/// <param name="CustomDictionary3">ref optional object CustomDictionary3</param>
		/// <param name="CustomDictionary4">ref optional object CustomDictionary4</param>
		/// <param name="CustomDictionary5">ref optional object CustomDictionary5</param>
		/// <param name="CustomDictionary6">ref optional object CustomDictionary6</param>
		/// <param name="CustomDictionary7">ref optional object CustomDictionary7</param>
		/// <param name="CustomDictionary8">ref optional object CustomDictionary8</param>
		/// <param name="CustomDictionary9">ref optional object CustomDictionary9</param>
		/// <param name="CustomDictionary10">ref optional object CustomDictionary10</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CheckSpelling(ref object customDictionary, ref object ignoreUppercase, ref object alwaysSuggest, ref object customDictionary2, ref object customDictionary3, ref object customDictionary4, ref object customDictionary5, ref object customDictionary6, ref object customDictionary7, ref object customDictionary8, ref object customDictionary9, ref object customDictionary10)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(customDictionary, ignoreUppercase, alwaysSuggest, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7, customDictionary8, customDictionary9, customDictionary10);
			Invoker.Method(this, "CheckSpelling", paramsArray, modifiers);
			customDictionary = (object)paramsArray[0];
			ignoreUppercase = (object)paramsArray[1];
			alwaysSuggest = (object)paramsArray[2];
			customDictionary2 = (object)paramsArray[3];
			customDictionary3 = (object)paramsArray[4];
			customDictionary4 = (object)paramsArray[5];
			customDictionary5 = (object)paramsArray[6];
			customDictionary6 = (object)paramsArray[7];
			customDictionary7 = (object)paramsArray[8];
			customDictionary8 = (object)paramsArray[9];
			customDictionary9 = (object)paramsArray[10];
			customDictionary10 = (object)paramsArray[11];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void CheckSpelling()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CheckSpelling", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="CustomDictionary">ref optional object CustomDictionary</param>
		/// <param name="IgnoreUppercase">ref optional object IgnoreUppercase</param>
		/// <param name="MainDictionary">ref optional object MainDictionary</param>
		/// <param name="SuggestionMode">ref optional object SuggestionMode</param>
		/// <param name="CustomDictionary2">ref optional object CustomDictionary2</param>
		/// <param name="CustomDictionary3">ref optional object CustomDictionary3</param>
		/// <param name="CustomDictionary4">ref optional object CustomDictionary4</param>
		/// <param name="CustomDictionary5">ref optional object CustomDictionary5</param>
		/// <param name="CustomDictionary6">ref optional object CustomDictionary6</param>
		/// <param name="CustomDictionary7">ref optional object CustomDictionary7</param>
		/// <param name="CustomDictionary8">ref optional object CustomDictionary8</param>
		/// <param name="CustomDictionary9">ref optional object CustomDictionary9</param>
		/// <param name="CustomDictionary10">ref optional object CustomDictionary10</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(ref object customDictionary, ref object ignoreUppercase, ref object mainDictionary, ref object suggestionMode, ref object customDictionary2, ref object customDictionary3, ref object customDictionary4, ref object customDictionary5, ref object customDictionary6, ref object customDictionary7, ref object customDictionary8, ref object customDictionary9, ref object customDictionary10)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7, customDictionary8, customDictionary9, customDictionary10);
			object returnItem = Invoker.MethodReturn(this, "GetSpellingSuggestions", paramsArray, modifiers);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.SpellingSuggestions;
			customDictionary = (object)paramsArray[0];
			ignoreUppercase = (object)paramsArray[1];
			mainDictionary = (object)paramsArray[2];
			suggestionMode = (object)paramsArray[3];
			customDictionary2 = (object)paramsArray[4];
			customDictionary3 = (object)paramsArray[5];
			customDictionary4 = (object)paramsArray[6];
			customDictionary5 = (object)paramsArray[7];
			customDictionary6 = (object)paramsArray[8];
			customDictionary7 = (object)paramsArray[9];
			customDictionary8 = (object)paramsArray[10];
			customDictionary9 = (object)paramsArray[11];
			customDictionary10 = (object)paramsArray[12];
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertParagraphBefore()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "InsertParagraphBefore", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void NextSubdocument()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "NextSubdocument", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void PreviousSubdocument()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "PreviousSubdocument", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="ConversionsMode">ref optional object ConversionsMode</param>
		/// <param name="FastConversion">ref optional object FastConversion</param>
		/// <param name="CheckHangulEnding">ref optional object CheckHangulEnding</param>
		/// <param name="EnableRecentOrdering">ref optional object EnableRecentOrdering</param>
		/// <param name="CustomDictionary">ref optional object CustomDictionary</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void ConvertHangulAndHanja(ref object conversionsMode, ref object fastConversion, ref object checkHangulEnding, ref object enableRecentOrdering, ref object customDictionary)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(conversionsMode, fastConversion, checkHangulEnding, enableRecentOrdering, customDictionary);
			Invoker.Method(this, "ConvertHangulAndHanja", paramsArray, modifiers);
			conversionsMode = (object)paramsArray[0];
			fastConversion = (object)paramsArray[1];
			checkHangulEnding = (object)paramsArray[2];
			enableRecentOrdering = (object)paramsArray[3];
			customDictionary = (object)paramsArray[4];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void ConvertHangulAndHanja()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "ConvertHangulAndHanja", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void PasteAsNestedTable()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "PasteAsNestedTable", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Style">ref object Style</param>
		/// <param name="Symbol">ref optional object Symbol</param>
		/// <param name="EnclosedText">ref optional object EnclosedText</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void ModifyEnclosure(ref object style, ref object symbol, ref object enclosedText)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(style, symbol, enclosedText);
			Invoker.Method(this, "ModifyEnclosure", paramsArray, modifiers);
			style = (object)paramsArray[0];
			symbol = (object)paramsArray[1];
			enclosedText = (object)paramsArray[2];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Style">ref object Style</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void ModifyEnclosure(ref object style)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(style);
			Invoker.Method(this, "ModifyEnclosure", paramsArray, modifiers);
			style = (object)paramsArray[0];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Text">string Text</param>
		/// <param name="Alignment">NetOffice.WordApi.Enums.WdPhoneticGuideAlignmentType Alignment</param>
		/// <param name="Raise">Int32 Raise</param>
		/// <param name="FontSize">Int32 FontSize</param>
		/// <param name="FontName">string FontName</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void PhoneticGuide(string text, NetOffice.WordApi.Enums.WdPhoneticGuideAlignmentType alignment, Int32 raise, Int32 fontSize, string fontName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(text, alignment, raise, fontSize, fontName);
			Invoker.Method(this, "PhoneticGuide", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="DateTimeFormat">ref optional object DateTimeFormat</param>
		/// <param name="InsertAsField">ref optional object InsertAsField</param>
		/// <param name="InsertAsFullWidth">ref optional object InsertAsFullWidth</param>
		/// <param name="DateLanguage">ref optional object DateLanguage</param>
		/// <param name="CalendarType">ref optional object CalendarType</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertDateTime(ref object dateTimeFormat, ref object insertAsField, ref object insertAsFullWidth, ref object dateLanguage, ref object calendarType)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(dateTimeFormat, insertAsField, insertAsFullWidth, dateLanguage, calendarType);
			Invoker.Method(this, "InsertDateTime", paramsArray, modifiers);
			dateTimeFormat = (object)paramsArray[0];
			insertAsField = (object)paramsArray[1];
			insertAsFullWidth = (object)paramsArray[2];
			dateLanguage = (object)paramsArray[3];
			calendarType = (object)paramsArray[4];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void InsertDateTime()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "InsertDateTime", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="ExcludeHeader">ref optional object ExcludeHeader</param>
		/// <param name="FieldNumber">ref optional object FieldNumber</param>
		/// <param name="SortFieldType">ref optional object SortFieldType</param>
		/// <param name="SortOrder">ref optional object SortOrder</param>
		/// <param name="FieldNumber2">ref optional object FieldNumber2</param>
		/// <param name="SortFieldType2">ref optional object SortFieldType2</param>
		/// <param name="SortOrder2">ref optional object SortOrder2</param>
		/// <param name="FieldNumber3">ref optional object FieldNumber3</param>
		/// <param name="SortFieldType3">ref optional object SortFieldType3</param>
		/// <param name="SortOrder3">ref optional object SortOrder3</param>
		/// <param name="SortColumn">ref optional object SortColumn</param>
		/// <param name="Separator">ref optional object Separator</param>
		/// <param name="CaseSensitive">ref optional object CaseSensitive</param>
		/// <param name="BidiSort">ref optional object BidiSort</param>
		/// <param name="IgnoreThe">ref optional object IgnoreThe</param>
		/// <param name="IgnoreKashida">ref optional object IgnoreKashida</param>
		/// <param name="IgnoreDiacritics">ref optional object IgnoreDiacritics</param>
		/// <param name="IgnoreHe">ref optional object IgnoreHe</param>
		/// <param name="LanguageID">ref optional object LanguageID</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Sort(ref object excludeHeader, ref object fieldNumber, ref object sortFieldType, ref object sortOrder, ref object fieldNumber2, ref object sortFieldType2, ref object sortOrder2, ref object fieldNumber3, ref object sortFieldType3, ref object sortOrder3, ref object sortColumn, ref object separator, ref object caseSensitive, ref object bidiSort, ref object ignoreThe, ref object ignoreKashida, ref object ignoreDiacritics, ref object ignoreHe, ref object languageID)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(excludeHeader, fieldNumber, sortFieldType, sortOrder, fieldNumber2, sortFieldType2, sortOrder2, fieldNumber3, sortFieldType3, sortOrder3, sortColumn, separator, caseSensitive, bidiSort, ignoreThe, ignoreKashida, ignoreDiacritics, ignoreHe, languageID);
			Invoker.Method(this, "Sort", paramsArray, modifiers);
			excludeHeader = (object)paramsArray[0];
			fieldNumber = (object)paramsArray[1];
			sortFieldType = (object)paramsArray[2];
			sortOrder = (object)paramsArray[3];
			fieldNumber2 = (object)paramsArray[4];
			sortFieldType2 = (object)paramsArray[5];
			sortOrder2 = (object)paramsArray[6];
			fieldNumber3 = (object)paramsArray[7];
			sortFieldType3 = (object)paramsArray[8];
			sortOrder3 = (object)paramsArray[9];
			sortColumn = (object)paramsArray[10];
			separator = (object)paramsArray[11];
			caseSensitive = (object)paramsArray[12];
			bidiSort = (object)paramsArray[13];
			ignoreThe = (object)paramsArray[14];
			ignoreKashida = (object)paramsArray[15];
			ignoreDiacritics = (object)paramsArray[16];
			ignoreHe = (object)paramsArray[17];
			languageID = (object)paramsArray[18];
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void Sort()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Sort", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void DetectLanguage()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "DetectLanguage", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Separator">ref optional object Separator</param>
		/// <param name="NumRows">ref optional object NumRows</param>
		/// <param name="NumColumns">ref optional object NumColumns</param>
		/// <param name="InitialColumnWidth">ref optional object InitialColumnWidth</param>
		/// <param name="Format">ref optional object Format</param>
		/// <param name="ApplyBorders">ref optional object ApplyBorders</param>
		/// <param name="ApplyShading">ref optional object ApplyShading</param>
		/// <param name="ApplyFont">ref optional object ApplyFont</param>
		/// <param name="ApplyColor">ref optional object ApplyColor</param>
		/// <param name="ApplyHeadingRows">ref optional object ApplyHeadingRows</param>
		/// <param name="ApplyLastRow">ref optional object ApplyLastRow</param>
		/// <param name="ApplyFirstColumn">ref optional object ApplyFirstColumn</param>
		/// <param name="ApplyLastColumn">ref optional object ApplyLastColumn</param>
		/// <param name="AutoFit">ref optional object AutoFit</param>
		/// <param name="AutoFitBehavior">ref optional object AutoFitBehavior</param>
		/// <param name="DefaultTableBehavior">ref optional object DefaultTableBehavior</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Table ConvertToTable(ref object separator, ref object numRows, ref object numColumns, ref object initialColumnWidth, ref object format, ref object applyBorders, ref object applyShading, ref object applyFont, ref object applyColor, ref object applyHeadingRows, ref object applyLastRow, ref object applyFirstColumn, ref object applyLastColumn, ref object autoFit, ref object autoFitBehavior, ref object defaultTableBehavior)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(separator, numRows, numColumns, initialColumnWidth, format, applyBorders, applyShading, applyFont, applyColor, applyHeadingRows, applyLastRow, applyFirstColumn, applyLastColumn, autoFit, autoFitBehavior, defaultTableBehavior);
			object returnItem = Invoker.MethodReturn(this, "ConvertToTable", paramsArray, modifiers);
			NetOffice.WordApi.Table newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Table;
			separator = (object)paramsArray[0];
			numRows = (object)paramsArray[1];
			numColumns = (object)paramsArray[2];
			initialColumnWidth = (object)paramsArray[3];
			format = (object)paramsArray[4];
			applyBorders = (object)paramsArray[5];
			applyShading = (object)paramsArray[6];
			applyFont = (object)paramsArray[7];
			applyColor = (object)paramsArray[8];
			applyHeadingRows = (object)paramsArray[9];
			applyLastRow = (object)paramsArray[10];
			applyFirstColumn = (object)paramsArray[11];
			applyLastColumn = (object)paramsArray[12];
			autoFit = (object)paramsArray[13];
			autoFitBehavior = (object)paramsArray[14];
			defaultTableBehavior = (object)paramsArray[15];
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public NetOffice.WordApi.Table ConvertToTable()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "ConvertToTable", paramsArray);
			NetOffice.WordApi.Table newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Table;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD09 WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="WdTCSCConverterDirection">NetOffice.WordApi.Enums.WdTCSCConverterDirection WdTCSCConverterDirection</param>
		/// <param name="CommonTerms">bool CommonTerms</param>
		/// <param name="UseVariants">bool UseVariants</param>
		[SupportByLibrary("WD09","WD10","WD11","WD12","WD14")]
		public void TCSCConverter(NetOffice.WordApi.Enums.WdTCSCConverterDirection wdTCSCConverterDirection, bool commonTerms, bool useVariants)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(wdTCSCConverterDirection, commonTerms, useVariants);
			Invoker.Method(this, "TCSCConverter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="Type">NetOffice.WordApi.Enums.WdRecoveryType Type</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void PasteAndFormat(NetOffice.WordApi.Enums.WdRecoveryType type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			Invoker.Method(this, "PasteAndFormat", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		/// <param name="LinkedToExcel">bool LinkedToExcel</param>
		/// <param name="WordFormatting">bool WordFormatting</param>
		/// <param name="RTF">bool RTF</param>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void PasteExcelTable(bool linkedToExcel, bool wordFormatting, bool rTF)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(linkedToExcel, wordFormatting, rTF);
			Invoker.Method(this, "PasteExcelTable", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD10 WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD10","WD11","WD12","WD14")]
		public void PasteAppendTable()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "PasteAppendTable", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="ReferenceType">ref object ReferenceType</param>
		/// <param name="ReferenceKind">NetOffice.WordApi.Enums.WdReferenceKind ReferenceKind</param>
		/// <param name="ReferenceItem">ref object ReferenceItem</param>
		/// <param name="InsertAsHyperlink">ref optional object InsertAsHyperlink</param>
		/// <param name="IncludePosition">ref optional object IncludePosition</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public void InsertCrossReference_2002(ref object referenceType, NetOffice.WordApi.Enums.WdReferenceKind referenceKind, ref object referenceItem, ref object insertAsHyperlink, ref object includePosition)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,false,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(referenceType, referenceKind, referenceItem, insertAsHyperlink, includePosition);
			Invoker.Method(this, "InsertCrossReference_2002", paramsArray, modifiers);
			referenceType = (object)paramsArray[0];
			referenceItem = (object)paramsArray[2];
			insertAsHyperlink = (object)paramsArray[3];
			includePosition = (object)paramsArray[4];
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="ReferenceType">ref object ReferenceType</param>
		/// <param name="ReferenceKind">NetOffice.WordApi.Enums.WdReferenceKind ReferenceKind</param>
		/// <param name="ReferenceItem">ref object ReferenceItem</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public void InsertCrossReference_2002(ref object referenceType, NetOffice.WordApi.Enums.WdReferenceKind referenceKind, ref object referenceItem)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,false,true);
			object[] paramsArray = Invoker.ValidateParamsArray(referenceType, referenceKind, referenceItem);
			Invoker.Method(this, "InsertCrossReference_2002", paramsArray, modifiers);
			referenceType = (object)paramsArray[0];
			referenceItem = (object)paramsArray[2];
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="Label">ref object Label</param>
		/// <param name="Title">ref optional object Title</param>
		/// <param name="TitleAutoText">ref optional object TitleAutoText</param>
		/// <param name="Position">ref optional object Position</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public void InsertCaptionXP(ref object label, ref object title, ref object titleAutoText, ref object position)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true,true,true,true);
			object[] paramsArray = Invoker.ValidateParamsArray(label, title, titleAutoText, position);
			Invoker.Method(this, "InsertCaptionXP", paramsArray, modifiers);
			label = (object)paramsArray[0];
			title = (object)paramsArray[1];
			titleAutoText = (object)paramsArray[2];
			position = (object)paramsArray[3];
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="Label">ref object Label</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public void InsertCaptionXP(ref object label)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(label);
			Invoker.Method(this, "InsertCaptionXP", paramsArray, modifiers);
			label = (object)paramsArray[0];
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="EditorID">ref optional object EditorID</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public NetOffice.WordApi.Range GoToEditableRange(ref object editorID)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(true);
			object[] paramsArray = Invoker.ValidateParamsArray(editorID);
			object returnItem = Invoker.MethodReturn(this, "GoToEditableRange", paramsArray, modifiers);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			editorID = (object)paramsArray[0];
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		[SupportByLibrary("WD11","WD12","WD14")]
		public NetOffice.WordApi.Range GoToEditableRange()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(this, "GoToEditableRange", paramsArray);
			NetOffice.WordApi.Range newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this, returnItem) as NetOffice.WordApi.Range;
			return newObject;
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="XML">string XML</param>
		/// <param name="Transform">ref optional object Transform</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public void InsertXML(string xML, ref object transform)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,true);
			object[] paramsArray = Invoker.ValidateParamsArray(xML, transform);
			Invoker.Method(this, "InsertXML", paramsArray, modifiers);
			transform = (object)paramsArray[1];
		}

		/// <summary>
		/// SupportByLibrary WD11 WD12 WD14 
		/// </summary>
		/// <param name="XML">string XML</param>
		[SupportByLibrary("WD11","WD12","WD14")]
		public void InsertXML(string xML)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(xML);
			Invoker.Method(this, "InsertXML", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		/// <param name="FileName">string FileName</param>
		/// <param name="Format">NetOffice.WordApi.Enums.WdSaveFormat Format</param>
		[SupportByLibrary("WD12","WD14")]
		public void ExportFragment(string fileName, NetOffice.WordApi.Enums.WdSaveFormat format)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName, format);
			Invoker.Method(this, "ExportFragment", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		/// <param name="Level">Int16 Level</param>
		[SupportByLibrary("WD12","WD14")]
		public void SetListLevel(Int16 level)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(level);
			Invoker.Method(this, "SetListLevel", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		/// <param name="Alignment">Int32 Alignment</param>
		/// <param name="RelativeTo">Int32 RelativeTo</param>
		[SupportByLibrary("WD12","WD14")]
		public void InsertAlignmentTab(Int32 alignment, Int32 relativeTo)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(alignment, relativeTo);
			Invoker.Method(this, "InsertAlignmentTab", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		/// <param name="FileName">string FileName</param>
		/// <param name="MatchDestination">bool MatchDestination</param>
		[SupportByLibrary("WD12","WD14")]
		public void ImportFragment(string fileName, bool matchDestination)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(fileName, matchDestination);
			Invoker.Method(this, "ImportFragment", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		/// <param name="OutputFileName">string OutputFileName</param>
		/// <param name="ExportFormat">NetOffice.WordApi.Enums.WdExportFormat ExportFormat</param>
		/// <param name="OpenAfterExport">bool OpenAfterExport</param>
		/// <param name="OptimizeFor">NetOffice.WordApi.Enums.WdExportOptimizeFor OptimizeFor</param>
		/// <param name="ExportCurrentPage">bool ExportCurrentPage</param>
		/// <param name="Item">NetOffice.WordApi.Enums.WdExportItem Item</param>
		/// <param name="IncludeDocProps">bool IncludeDocProps</param>
		/// <param name="KeepIRM">bool KeepIRM</param>
		/// <param name="CreateBookmarks">NetOffice.WordApi.Enums.WdExportCreateBookmarks CreateBookmarks</param>
		/// <param name="DocStructureTags">bool DocStructureTags</param>
		/// <param name="BitmapMissingFonts">bool BitmapMissingFonts</param>
		/// <param name="UseISO19005_1">bool UseISO19005_1</param>
		/// <param name="FixedFormatExtClassPtr">ref optional object FixedFormatExtClassPtr</param>
		[SupportByLibrary("WD12","WD14")]
		public void ExportAsFixedFormat(string outputFileName, NetOffice.WordApi.Enums.WdExportFormat exportFormat, bool openAfterExport, NetOffice.WordApi.Enums.WdExportOptimizeFor optimizeFor, bool exportCurrentPage, NetOffice.WordApi.Enums.WdExportItem item, bool includeDocProps, bool keepIRM, NetOffice.WordApi.Enums.WdExportCreateBookmarks createBookmarks, bool docStructureTags, bool bitmapMissingFonts, bool useISO19005_1, ref object fixedFormatExtClassPtr)
		{
			ParameterModifier[] modifiers = Invoker.CreateParamModifiers(false,false,false,false,false,false,false,false,false,false,false,false,true);
			object[] paramsArray = Invoker.ValidateParamsArray(outputFileName, exportFormat, openAfterExport, optimizeFor, exportCurrentPage, item, includeDocProps, keepIRM, createBookmarks, docStructureTags, bitmapMissingFonts, useISO19005_1, fixedFormatExtClassPtr);
			Invoker.Method(this, "ExportAsFixedFormat", paramsArray, modifiers);
			fixedFormatExtClassPtr = (object)paramsArray[12];
		}

		/// <summary>
		/// SupportByLibrary WD12 WD14 
		/// </summary>
		/// <param name="OutputFileName">string OutputFileName</param>
		/// <param name="ExportFormat">NetOffice.WordApi.Enums.WdExportFormat ExportFormat</param>
		/// <param name="OpenAfterExport">bool OpenAfterExport</param>
		/// <param name="OptimizeFor">NetOffice.WordApi.Enums.WdExportOptimizeFor OptimizeFor</param>
		/// <param name="ExportCurrentPage">bool ExportCurrentPage</param>
		/// <param name="Item">NetOffice.WordApi.Enums.WdExportItem Item</param>
		/// <param name="IncludeDocProps">bool IncludeDocProps</param>
		/// <param name="KeepIRM">bool KeepIRM</param>
		/// <param name="CreateBookmarks">NetOffice.WordApi.Enums.WdExportCreateBookmarks CreateBookmarks</param>
		/// <param name="DocStructureTags">bool DocStructureTags</param>
		/// <param name="BitmapMissingFonts">bool BitmapMissingFonts</param>
		/// <param name="UseISO19005_1">bool UseISO19005_1</param>
		[SupportByLibrary("WD12","WD14")]
		public void ExportAsFixedFormat(string outputFileName, NetOffice.WordApi.Enums.WdExportFormat exportFormat, bool openAfterExport, NetOffice.WordApi.Enums.WdExportOptimizeFor optimizeFor, bool exportCurrentPage, NetOffice.WordApi.Enums.WdExportItem item, bool includeDocProps, bool keepIRM, NetOffice.WordApi.Enums.WdExportCreateBookmarks createBookmarks, bool docStructureTags, bool bitmapMissingFonts, bool useISO19005_1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(outputFileName, exportFormat, openAfterExport, optimizeFor, exportCurrentPage, item, includeDocProps, keepIRM, createBookmarks, docStructureTags, bitmapMissingFonts, useISO19005_1);
			Invoker.Method(this, "ExportAsFixedFormat", paramsArray);
		}

		#endregion
		#pragma warning restore
	}
}