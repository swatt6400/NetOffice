//Generated by LateBindingApi.CodeGenerator
using System;
using NetRuntimeSystem = System;
using System.ComponentModel;
using LateBindingApi.Core;
namespace NetOffice.AccessApi
{

	#region Delegates

	#pragma warning disable
	public delegate void WebBrowserControl_UpdatedEventHandler(ref Int16 Code);
	public delegate void WebBrowserControl_BeforeUpdateEventHandler(ref Int16 Cancel);
	public delegate void WebBrowserControl_AfterUpdateEventHandler();
	public delegate void WebBrowserControl_EnterEventHandler();
	public delegate void WebBrowserControl_ExitEventHandler(ref Int16 Cancel);
	public delegate void WebBrowserControl_DirtyEventHandler(ref Int16 Cancel);
	public delegate void WebBrowserControl_ChangeEventHandler();
	public delegate void WebBrowserControl_GotFocusEventHandler();
	public delegate void WebBrowserControl_LostFocusEventHandler();
	public delegate void WebBrowserControl_ClickEventHandler();
	public delegate void WebBrowserControl_DblClickEventHandler(ref Int16 Cancel);
	public delegate void WebBrowserControl_MouseDownEventHandler(ref Int16 Button, ref Int16 Shift, ref Single X, ref Single Y);
	public delegate void WebBrowserControl_MouseMoveEventHandler(ref Int16 Button, ref Int16 Shift, ref Single X, ref Single Y);
	public delegate void WebBrowserControl_MouseUpEventHandler(ref Int16 Button, ref Int16 Shift, ref Single X, ref Single Y);
	public delegate void WebBrowserControl_KeyDownEventHandler(ref Int16 KeyCode, ref Int16 Shift);
	public delegate void WebBrowserControl_KeyPressEventHandler(ref Int16 KeyAscii);
	public delegate void WebBrowserControl_KeyUpEventHandler(ref Int16 KeyCode, ref Int16 Shift);
	public delegate void WebBrowserControl_BeforeNavigate2EventHandler(COMObject pDisp, ref COMObject URL, ref COMObject flags, ref COMObject TargetFrameName, ref COMObject PostData, ref COMObject Headers, ref bool Cancel);
	public delegate void WebBrowserControl_DocumentCompleteEventHandler(COMObject pDisp, ref COMObject URL);
	public delegate void WebBrowserControl_ProgressChangeEventHandler(Int32 Progress, Int32 ProgressMax);
	public delegate void WebBrowserControl_NavigateErrorEventHandler(COMObject pDisp, ref COMObject URL, ref COMObject TargetFrameName, ref COMObject StatusCode, ref bool Cancel);
	#pragma warning restore

	#endregion

	///<summary>
	/// CoClass WebBrowserControl SupportByLibrary "Access", 14
	///</summary>
	[SupportByLibrary("Access", 14)]
	[EntityTypeAttribute(EntityType.IsCoClass)]
	public class WebBrowserControl : _WebBrowserControl, IEventBinding 
	{
		#pragma warning disable
		#region Fields
		
		private NetRuntimeSystem.Runtime.InteropServices.ComTypes.IConnectionPoint _connectPoint;
		private string _activeSinkId;
		private NetRuntimeSystem.Type _thisType;
		DispWebBrowserControlEvents_SinkHelper _dispWebBrowserControlEvents_SinkHelper;
	
		#endregion
		
		#region Construction

        /// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public WebBrowserControl(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}
		
		/// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        /// <param name="comProxyType">Type of inner wrapped COM proxy"</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public WebBrowserControl(COMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}
		
		/// <param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public WebBrowserControl(COMObject replacedObject) : base(replacedObject)
		{
		}
		
		public WebBrowserControl()
		{
			CreateFromProgId("Access.WebBrowserControl");
		}
		
		/// <param name="progId">progId</param>
		public WebBrowserControl(string progId)
		{
			CreateFromProgId(progId);
		}

		#endregion
		
		#region Private Methods
		
		/// <summary>
        /// creates active sink helper
        /// </summary>
		private void CreateEventBridge()
        {
			if(false == LateBindingApi.Core.Settings.EnableEvents)
				return;
	
			if (null != _connectPoint)
				return;
	
            if (null == _activeSinkId)
				_activeSinkId = SinkHelper.GetConnectionPoint(this, ref _connectPoint, DispWebBrowserControlEvents_SinkHelper.Id);


			if(DispWebBrowserControlEvents_SinkHelper.Id.Equals(_activeSinkId, StringComparison.InvariantCultureIgnoreCase))
			{
				_dispWebBrowserControlEvents_SinkHelper = new DispWebBrowserControlEvents_SinkHelper(this, _connectPoint);
				return;
			} 
        }
		
		#endregion

		#region Events

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_UpdatedEventHandler _UpdatedEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_UpdatedEventHandler UpdatedEvent
		{
			add
			{
				CreateEventBridge();
				_UpdatedEvent += value;
			}
			remove
			{
				_UpdatedEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_BeforeUpdateEventHandler _BeforeUpdateEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_BeforeUpdateEventHandler BeforeUpdateEvent
		{
			add
			{
				CreateEventBridge();
				_BeforeUpdateEvent += value;
			}
			remove
			{
				_BeforeUpdateEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_AfterUpdateEventHandler _AfterUpdateEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_AfterUpdateEventHandler AfterUpdateEvent
		{
			add
			{
				CreateEventBridge();
				_AfterUpdateEvent += value;
			}
			remove
			{
				_AfterUpdateEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_EnterEventHandler _EnterEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_EnterEventHandler EnterEvent
		{
			add
			{
				CreateEventBridge();
				_EnterEvent += value;
			}
			remove
			{
				_EnterEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_ExitEventHandler _ExitEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_ExitEventHandler ExitEvent
		{
			add
			{
				CreateEventBridge();
				_ExitEvent += value;
			}
			remove
			{
				_ExitEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_DirtyEventHandler _DirtyEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_DirtyEventHandler DirtyEvent
		{
			add
			{
				CreateEventBridge();
				_DirtyEvent += value;
			}
			remove
			{
				_DirtyEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_ChangeEventHandler _ChangeEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_ChangeEventHandler ChangeEvent
		{
			add
			{
				CreateEventBridge();
				_ChangeEvent += value;
			}
			remove
			{
				_ChangeEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_GotFocusEventHandler _GotFocusEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_GotFocusEventHandler GotFocusEvent
		{
			add
			{
				CreateEventBridge();
				_GotFocusEvent += value;
			}
			remove
			{
				_GotFocusEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_LostFocusEventHandler _LostFocusEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_LostFocusEventHandler LostFocusEvent
		{
			add
			{
				CreateEventBridge();
				_LostFocusEvent += value;
			}
			remove
			{
				_LostFocusEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_ClickEventHandler _ClickEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_ClickEventHandler ClickEvent
		{
			add
			{
				CreateEventBridge();
				_ClickEvent += value;
			}
			remove
			{
				_ClickEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_DblClickEventHandler _DblClickEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_DblClickEventHandler DblClickEvent
		{
			add
			{
				CreateEventBridge();
				_DblClickEvent += value;
			}
			remove
			{
				_DblClickEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_MouseDownEventHandler _MouseDownEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_MouseDownEventHandler MouseDownEvent
		{
			add
			{
				CreateEventBridge();
				_MouseDownEvent += value;
			}
			remove
			{
				_MouseDownEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_MouseMoveEventHandler _MouseMoveEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_MouseMoveEventHandler MouseMoveEvent
		{
			add
			{
				CreateEventBridge();
				_MouseMoveEvent += value;
			}
			remove
			{
				_MouseMoveEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_MouseUpEventHandler _MouseUpEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_MouseUpEventHandler MouseUpEvent
		{
			add
			{
				CreateEventBridge();
				_MouseUpEvent += value;
			}
			remove
			{
				_MouseUpEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_KeyDownEventHandler _KeyDownEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_KeyDownEventHandler KeyDownEvent
		{
			add
			{
				CreateEventBridge();
				_KeyDownEvent += value;
			}
			remove
			{
				_KeyDownEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_KeyPressEventHandler _KeyPressEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_KeyPressEventHandler KeyPressEvent
		{
			add
			{
				CreateEventBridge();
				_KeyPressEvent += value;
			}
			remove
			{
				_KeyPressEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_KeyUpEventHandler _KeyUpEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_KeyUpEventHandler KeyUpEvent
		{
			add
			{
				CreateEventBridge();
				_KeyUpEvent += value;
			}
			remove
			{
				_KeyUpEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_BeforeNavigate2EventHandler _BeforeNavigate2Event;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_BeforeNavigate2EventHandler BeforeNavigate2Event
		{
			add
			{
				CreateEventBridge();
				_BeforeNavigate2Event += value;
			}
			remove
			{
				_BeforeNavigate2Event -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_DocumentCompleteEventHandler _DocumentCompleteEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_DocumentCompleteEventHandler DocumentCompleteEvent
		{
			add
			{
				CreateEventBridge();
				_DocumentCompleteEvent += value;
			}
			remove
			{
				_DocumentCompleteEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_ProgressChangeEventHandler _ProgressChangeEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_ProgressChangeEventHandler ProgressChangeEvent
		{
			add
			{
				CreateEventBridge();
				_ProgressChangeEvent += value;
			}
			remove
			{
				_ProgressChangeEvent -= value;
			}
		}

		/// <summary>
		/// SupportByLibrary Access, 14
		/// </summary>
		private event WebBrowserControl_NavigateErrorEventHandler _NavigateErrorEvent;

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public event WebBrowserControl_NavigateErrorEventHandler NavigateErrorEvent
		{
			add
			{
				CreateEventBridge();
				_NavigateErrorEvent += value;
			}
			remove
			{
				_NavigateErrorEvent -= value;
			}
		}

		#endregion

        #region IEventBinding Member
        
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public bool EventBridgeInitialized
        {
            get 
            {
                return (null != _connectPoint);
            }
        }
        
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public bool HasEventRecipients       
        {
			get
			{
				if(null == _thisType)
					_thisType = this.GetType();
					
				foreach (NetRuntimeSystem.Reflection.EventInfo item in _thisType.GetEvents())
				{
					MulticastDelegate eventDelegate = (MulticastDelegate) _thisType.GetType().GetField(item.Name, 
																			NetRuntimeSystem.Reflection.BindingFlags.NonPublic |
																			NetRuntimeSystem.Reflection.BindingFlags.Instance).GetValue(this);
					
					if( (null != eventDelegate) && (eventDelegate.GetInvocationList().Length > 0) )
						return false;
				}
				
				return false;
			}
        }
        
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public Delegate[] GetEventRecipients(string eventName)
        {
			if(null == _thisType)
				_thisType = this.GetType();
             
            MulticastDelegate eventDelegate = (MulticastDelegate)_thisType.GetField(
                                                "_" + eventName + "Event",
                                                NetRuntimeSystem.Reflection.BindingFlags.Instance |
                                                NetRuntimeSystem.Reflection.BindingFlags.NonPublic).GetValue(this);

            if (null != eventDelegate)
            {
                Delegate[] delegates = eventDelegate.GetInvocationList();
                return delegates;
            }
            else
                return new Delegate[0];
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public void DisposeSinkHelper()
        {
			if( null != _dispWebBrowserControlEvents_SinkHelper)
			{
				_dispWebBrowserControlEvents_SinkHelper.Dispose();
				_dispWebBrowserControlEvents_SinkHelper = null;
			}

			_connectPoint = null;
		}
        
        #endregion
		#pragma warning restore
	}
}