//Generated by LateBindingApi.CodeGenerator
using System;
using NetRuntimeSystem = System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Reflection;
using LateBindingApi.Core;
namespace NetOffice.WordApi
{
	///<summary>
	/// DispatchInterface MailMerge SupportByLibraryAttribute Word, 9,10,11,12,14
	///</summary>
	[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
	[EntityTypeAttribute(EntityType.IsDispatchInterface)]
	public class MailMerge : COMObject
	{
		#pragma warning disable
		#region Type Information

        private static Type _type;

		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public static Type LateBindingApiWrapperType
        {
            get
            {
                if (null == _type)
                    _type = typeof(MailMerge);
                    
                return _type;
            }
        }
        
        #endregion
        
		#region Construction

        /// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}
		
		/// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        /// <param name="comProxyType">Type of inner wrapped COM proxy"</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge(COMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}
		
		/// <param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge(COMObject replacedObject) : base(replacedObject)
		{
		}
		
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge() : base()
		{
		}
		
		/// <param name="progId">registered ProgID</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public MailMerge(string progId) : base(progId)
		{
		}
		
		#endregion
		
		#region Properties

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public NetOffice.WordApi.Application Application
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Application", paramsArray);
				NetOffice.WordApi.Application newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(this,returnItem,NetOffice.WordApi.Application.LateBindingApiWrapperType) as NetOffice.WordApi.Application;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public Int32 Creator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Creator", paramsArray);
				return (Int32)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public COMObject Parent
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Parent", paramsArray);
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(this,returnItem);
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public NetOffice.WordApi.Enums.WdMailMergeMainDocType MainDocumentType
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MainDocumentType", paramsArray);
				return (NetOffice.WordApi.Enums.WdMailMergeMainDocType)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MainDocumentType", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public NetOffice.WordApi.Enums.WdMailMergeState State
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "State", paramsArray);
				return (NetOffice.WordApi.Enums.WdMailMergeState)returnItem;
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public NetOffice.WordApi.Enums.WdMailMergeDestination Destination
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Destination", paramsArray);
				return (NetOffice.WordApi.Enums.WdMailMergeDestination)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "Destination", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public NetOffice.WordApi.MailMergeDataSource DataSource
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "DataSource", paramsArray);
				NetOffice.WordApi.MailMergeDataSource newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(this,returnItem,NetOffice.WordApi.MailMergeDataSource.LateBindingApiWrapperType) as NetOffice.WordApi.MailMergeDataSource;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public NetOffice.WordApi.MailMergeFields Fields
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "Fields", paramsArray);
				NetOffice.WordApi.MailMergeFields newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(this,returnItem,NetOffice.WordApi.MailMergeFields.LateBindingApiWrapperType) as NetOffice.WordApi.MailMergeFields;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public Int32 ViewMailMergeFieldCodes
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ViewMailMergeFieldCodes", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "ViewMailMergeFieldCodes", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public bool SuppressBlankLines
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "SuppressBlankLines", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "SuppressBlankLines", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public bool MailAsAttachment
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MailAsAttachment", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MailAsAttachment", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public string MailAddressFieldName
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MailAddressFieldName", paramsArray);
				return (string)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MailAddressFieldName", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public string MailSubject
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MailSubject", paramsArray);
				return (string)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MailSubject", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public bool HighlightMergeFields
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "HighlightMergeFields", paramsArray);
				return (bool)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "HighlightMergeFields", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public NetOffice.WordApi.Enums.WdMailMergeMailFormat MailFormat
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "MailFormat", paramsArray);
				return (NetOffice.WordApi.Enums.WdMailMergeMailFormat)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "MailFormat", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public string ShowSendToCustom
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "ShowSendToCustom", paramsArray);
				return (string)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "ShowSendToCustom", paramsArray);
			}
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public Int32 WizardState
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(this, "WizardState", paramsArray);
				return (Int32)returnItem;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(this, "WizardState", paramsArray);
			}
		}

		#endregion

		#region Methods

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">optional object HeaderRecord</param>
		/// <param name="MSQuery">optional object MSQuery</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		/// <param name="SQLStatement1">optional object SQLStatement1</param>
		/// <param name="Connection">optional object Connection</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name, object passwordDocument, object writePasswordDocument, object headerRecord, object mSQuery, object sQLStatement, object sQLStatement1, object connection, object linkToSource)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord, mSQuery, sQLStatement, sQLStatement1, connection, linkToSource);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name, object passwordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name, object passwordDocument, object writePasswordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">optional object HeaderRecord</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name, object passwordDocument, object writePasswordDocument, object headerRecord)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">optional object HeaderRecord</param>
		/// <param name="MSQuery">optional object MSQuery</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name, object passwordDocument, object writePasswordDocument, object headerRecord, object mSQuery)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord, mSQuery);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">optional object HeaderRecord</param>
		/// <param name="MSQuery">optional object MSQuery</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name, object passwordDocument, object writePasswordDocument, object headerRecord, object mSQuery, object sQLStatement)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord, mSQuery, sQLStatement);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">optional object HeaderRecord</param>
		/// <param name="MSQuery">optional object MSQuery</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		/// <param name="SQLStatement1">optional object SQLStatement1</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name, object passwordDocument, object writePasswordDocument, object headerRecord, object mSQuery, object sQLStatement, object sQLStatement1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord, mSQuery, sQLStatement, sQLStatement1);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">optional object Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">optional object HeaderRecord</param>
		/// <param name="MSQuery">optional object MSQuery</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		/// <param name="SQLStatement1">optional object SQLStatement1</param>
		/// <param name="Connection">optional object Connection</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateDataSource(object name, object passwordDocument, object writePasswordDocument, object headerRecord, object mSQuery, object sQLStatement, object sQLStatement1, object connection)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord, mSQuery, sQLStatement, sQLStatement1, connection);
			Invoker.Method(this, "CreateDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="HeaderRecord">optional object HeaderRecord</param>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateHeaderSource(string name, object passwordDocument, object writePasswordDocument, object headerRecord)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument, headerRecord);
			Invoker.Method(this, "CreateHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateHeaderSource(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "CreateHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateHeaderSource(string name, object passwordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument);
			Invoker.Method(this, "CreateHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void CreateHeaderSource(string name, object passwordDocument, object writePasswordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, passwordDocument, writePasswordDocument);
			Invoker.Method(this, "CreateHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="Connection">optional object Connection</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		/// <param name="SQLStatement1">optional object SQLStatement1</param>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object connection, object sQLStatement, object sQLStatement1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement, sQLStatement1);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="Connection">optional object Connection</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		/// <param name="SQLStatement1">optional object SQLStatement1</param>
		/// <param name="OpenExclusive">optional object OpenExclusive</param>
		/// <param name="SubType">optional object SubType</param>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object connection, object sQLStatement, object sQLStatement1, object openExclusive, object subType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement, sQLStatement1, openExclusive, subType);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="Connection">optional object Connection</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object connection)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="Connection">optional object Connection</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object connection, object sQLStatement)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="Connection">optional object Connection</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		/// <param name="SQLStatement1">optional object SQLStatement1</param>
		/// <param name="OpenExclusive">optional object OpenExclusive</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object connection, object sQLStatement, object sQLStatement1, object openExclusive)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement, sQLStatement1, openExclusive);
			Invoker.Method(this, "OpenDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="OpenExclusive">optional object OpenExclusive</param>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object openExclusive)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, openExclusive);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions, object readOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void OpenHeaderSource(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument);
			Invoker.Method(this, "OpenHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Pause">optional object Pause</param>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void Execute(object pause)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pause);
			Invoker.Method(this, "Execute", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void Execute()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Execute", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void Check()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Check", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void EditDataSource()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "EditDataSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void EditHeaderSource()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "EditHeaderSource", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void EditMainDocument()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "EditMainDocument", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Type">string Type</param>
		[SupportByLibraryAttribute("Word", 9,10,11,12,14)]
		public void UseAddressBook(string type)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(type);
			Invoker.Method(this, "UseAddressBook", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="Connection">optional object Connection</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		/// <param name="SQLStatement1">optional object SQLStatement1</param>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object connection, object sQLStatement, object sQLStatement1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement, sQLStatement1);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="Connection">optional object Connection</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object connection)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="LinkToSource">optional object LinkToSource</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		/// <param name="Connection">optional object Connection</param>
		/// <param name="SQLStatement">optional object SQLStatement</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenDataSource2000(string name, object format, object confirmConversions, object readOnly, object linkToSource, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate, object connection, object sQLStatement)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, linkToSource, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate, connection, sQLStatement);
			Invoker.Method(this, "OpenDataSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		/// <param name="WritePasswordTemplate">optional object WritePasswordTemplate</param>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument, object writePasswordTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument, writePasswordTemplate);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format, object confirmConversions)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format, object confirmConversions, object readOnly)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="Name">string Name</param>
		/// <param name="Format">optional object Format</param>
		/// <param name="ConfirmConversions">optional object ConfirmConversions</param>
		/// <param name="ReadOnly">optional object ReadOnly</param>
		/// <param name="AddToRecentFiles">optional object AddToRecentFiles</param>
		/// <param name="PasswordDocument">optional object PasswordDocument</param>
		/// <param name="PasswordTemplate">optional object PasswordTemplate</param>
		/// <param name="Revert">optional object Revert</param>
		/// <param name="WritePasswordDocument">optional object WritePasswordDocument</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void OpenHeaderSource2000(string name, object format, object confirmConversions, object readOnly, object addToRecentFiles, object passwordDocument, object passwordTemplate, object revert, object writePasswordDocument)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, format, confirmConversions, readOnly, addToRecentFiles, passwordDocument, passwordTemplate, revert, writePasswordDocument);
			Invoker.Method(this, "OpenHeaderSource2000", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="InitialState">object InitialState</param>
		/// <param name="ShowDocumentStep">optional object ShowDocumentStep</param>
		/// <param name="ShowTemplateStep">optional object ShowTemplateStep</param>
		/// <param name="ShowDataStep">optional object ShowDataStep</param>
		/// <param name="ShowWriteStep">optional object ShowWriteStep</param>
		/// <param name="ShowPreviewStep">optional object ShowPreviewStep</param>
		/// <param name="ShowMergeStep">optional object ShowMergeStep</param>
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void ShowWizard(object initialState, object showDocumentStep, object showTemplateStep, object showDataStep, object showWriteStep, object showPreviewStep, object showMergeStep)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(initialState, showDocumentStep, showTemplateStep, showDataStep, showWriteStep, showPreviewStep, showMergeStep);
			Invoker.Method(this, "ShowWizard", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="InitialState">object InitialState</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void ShowWizard(object initialState)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(initialState);
			Invoker.Method(this, "ShowWizard", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="InitialState">object InitialState</param>
		/// <param name="ShowDocumentStep">optional object ShowDocumentStep</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void ShowWizard(object initialState, object showDocumentStep)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(initialState, showDocumentStep);
			Invoker.Method(this, "ShowWizard", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="InitialState">object InitialState</param>
		/// <param name="ShowDocumentStep">optional object ShowDocumentStep</param>
		/// <param name="ShowTemplateStep">optional object ShowTemplateStep</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void ShowWizard(object initialState, object showDocumentStep, object showTemplateStep)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(initialState, showDocumentStep, showTemplateStep);
			Invoker.Method(this, "ShowWizard", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="InitialState">object InitialState</param>
		/// <param name="ShowDocumentStep">optional object ShowDocumentStep</param>
		/// <param name="ShowTemplateStep">optional object ShowTemplateStep</param>
		/// <param name="ShowDataStep">optional object ShowDataStep</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void ShowWizard(object initialState, object showDocumentStep, object showTemplateStep, object showDataStep)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(initialState, showDocumentStep, showTemplateStep, showDataStep);
			Invoker.Method(this, "ShowWizard", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="InitialState">object InitialState</param>
		/// <param name="ShowDocumentStep">optional object ShowDocumentStep</param>
		/// <param name="ShowTemplateStep">optional object ShowTemplateStep</param>
		/// <param name="ShowDataStep">optional object ShowDataStep</param>
		/// <param name="ShowWriteStep">optional object ShowWriteStep</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void ShowWizard(object initialState, object showDocumentStep, object showTemplateStep, object showDataStep, object showWriteStep)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(initialState, showDocumentStep, showTemplateStep, showDataStep, showWriteStep);
			Invoker.Method(this, "ShowWizard", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Word 10, 11, 12, 14
		/// </summary>
		/// <param name="InitialState">object InitialState</param>
		/// <param name="ShowDocumentStep">optional object ShowDocumentStep</param>
		/// <param name="ShowTemplateStep">optional object ShowTemplateStep</param>
		/// <param name="ShowDataStep">optional object ShowDataStep</param>
		/// <param name="ShowWriteStep">optional object ShowWriteStep</param>
		/// <param name="ShowPreviewStep">optional object ShowPreviewStep</param>
		[CustomMethodAttribute]
		[SupportByLibraryAttribute("Word", 10,11,12,14)]
		public void ShowWizard(object initialState, object showDocumentStep, object showTemplateStep, object showDataStep, object showWriteStep, object showPreviewStep)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(initialState, showDocumentStep, showTemplateStep, showDataStep, showWriteStep, showPreviewStep);
			Invoker.Method(this, "ShowWizard", paramsArray);
		}

		#endregion
		#pragma warning restore
	}
}