//Generated by LateBindingApi.CodeGenerator
using System;
using NetRuntimeSystem = System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using System.Reflection;
using LateBindingApi.Core;
namespace NetOffice.AccessApi
{
	///<summary>
	/// DispatchInterface DoCmd SupportByLibrary Access, 9,10,11,12,14
	///</summary>
	[SupportByLibrary("Access", 9,10,11,12,14)]
	[EntityTypeAttribute(EntityType.IsDispatchInterface)]
	public class DoCmd : COMObject
	{
		#pragma warning disable
		#region Type Information

        private static Type _type;

		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public static Type LateBindingApiWrapperType
        {
            get
            {
                if (null == _type)
                    _type = typeof(DoCmd);
                    
                return _type;
            }
        }
        
        #endregion
        
		#region Construction

        /// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public DoCmd(COMObject parentObject, object comProxy) : base(parentObject, comProxy)
		{
		}
		
		/// <param name="parentObject">object there has created the proxy</param>
        /// <param name="comProxy">inner wrapped COM proxy</param>
        /// <param name="comProxyType">Type of inner wrapped COM proxy"</param>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public DoCmd(COMObject parentObject, object comProxy, NetRuntimeSystem.Type comProxyType) : base(parentObject, comProxy, comProxyType)
		{
		}
		
		/// <param name="replacedObject">object to replaced. replacedObject are not usable after this action</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public DoCmd(COMObject replacedObject) : base(replacedObject)
		{
		}
		
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public DoCmd() : base()
		{
		}
		
		/// <param name="progId">registered ProgID</param>
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public DoCmd(string progId) : base(progId)
		{
		}
		
		#endregion
		
		#region Properties

		#endregion

		#region Methods

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="MenuName">object MenuName</param>
		/// <param name="MenuMacroName">object MenuMacroName</param>
		/// <param name="StatusBarText">object StatusBarText</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void AddMenu(object menuName, object menuMacroName, object statusBarText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(menuName, menuMacroName, statusBarText);
			Invoker.Method(this, "AddMenu", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11
		/// </summary>
		/// <param name="FilterName">optional object FilterName</param>
		/// <param name="WhereCondition">optional object WhereCondition</param>
		[SupportByLibrary("Access", 9,10,11)]
		public void ApplyFilter(object filterName, object whereCondition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filterName, whereCondition);
			Invoker.Method(this, "ApplyFilter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="FilterName">optional object FilterName</param>
		/// <param name="WhereCondition">optional object WhereCondition</param>
		/// <param name="ControlName">optional object ControlName</param>
		[SupportByLibrary("Access", 12,14)]
		public void ApplyFilter(object filterName, object whereCondition, object controlName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filterName, whereCondition, controlName);
			Invoker.Method(this, "ApplyFilter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void ApplyFilter()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "ApplyFilter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Beep()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Beep", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void CancelEvent()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CancelEvent", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		/// <param name="ObjectName">object ObjectName</param>
		/// <param name="Save">NetOffice.AccessApi.Enums.AcCloseSave Save</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Close(NetOffice.AccessApi.Enums.AcObjectType objectType, object objectName, NetOffice.AccessApi.Enums.AcCloseSave save)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, save);
			Invoker.Method(this, "Close", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="DestinationDatabase">object DestinationDatabase</param>
		/// <param name="NewName">object NewName</param>
		/// <param name="SourceObjectType">NetOffice.AccessApi.Enums.AcObjectType SourceObjectType</param>
		/// <param name="SourceObjectName">optional object SourceObjectName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void CopyObject(object destinationDatabase, object newName, NetOffice.AccessApi.Enums.AcObjectType sourceObjectType, object sourceObjectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(destinationDatabase, newName, sourceObjectType, sourceObjectName);
			Invoker.Method(this, "CopyObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="DestinationDatabase">object DestinationDatabase</param>
		/// <param name="NewName">object NewName</param>
		/// <param name="SourceObjectType">NetOffice.AccessApi.Enums.AcObjectType SourceObjectType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void CopyObject(object destinationDatabase, object newName, NetOffice.AccessApi.Enums.AcObjectType sourceObjectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(destinationDatabase, newName, sourceObjectType);
			Invoker.Method(this, "CopyObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="MenuBar">object MenuBar</param>
		/// <param name="MenuName">object MenuName</param>
		/// <param name="Command">object Command</param>
		/// <param name="Subcommand">optional object Subcommand</param>
		/// <param name="Version">optional object Version</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void DoMenuItem(object menuBar, object menuName, object command, object subcommand, object version)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(menuBar, menuName, command, subcommand, version);
			Invoker.Method(this, "DoMenuItem", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="MenuBar">object MenuBar</param>
		/// <param name="MenuName">object MenuName</param>
		/// <param name="Command">object Command</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void DoMenuItem(object menuBar, object menuName, object command)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(menuBar, menuName, command);
			Invoker.Method(this, "DoMenuItem", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="EchoOn">object EchoOn</param>
		/// <param name="StatusBarText">optional object StatusBarText</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Echo(object echoOn, object statusBarText)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(echoOn, statusBarText);
			Invoker.Method(this, "Echo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="EchoOn">object EchoOn</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Echo(object echoOn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(echoOn);
			Invoker.Method(this, "Echo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void FindNext()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "FindNext", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="FindWhat">object FindWhat</param>
		/// <param name="Match">NetOffice.AccessApi.Enums.AcFindMatch Match</param>
		/// <param name="MatchCase">object MatchCase</param>
		/// <param name="Search">NetOffice.AccessApi.Enums.AcSearchDirection Search</param>
		/// <param name="SearchAsFormatted">object SearchAsFormatted</param>
		/// <param name="OnlyCurrentField">NetOffice.AccessApi.Enums.AcFindField OnlyCurrentField</param>
		/// <param name="FindFirst">optional object FindFirst</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void FindRecord(object findWhat, NetOffice.AccessApi.Enums.AcFindMatch match, object matchCase, NetOffice.AccessApi.Enums.AcSearchDirection search, object searchAsFormatted, NetOffice.AccessApi.Enums.AcFindField onlyCurrentField, object findFirst)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(findWhat, match, matchCase, search, searchAsFormatted, onlyCurrentField, findFirst);
			Invoker.Method(this, "FindRecord", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="FindWhat">object FindWhat</param>
		/// <param name="Match">NetOffice.AccessApi.Enums.AcFindMatch Match</param>
		/// <param name="MatchCase">object MatchCase</param>
		/// <param name="Search">NetOffice.AccessApi.Enums.AcSearchDirection Search</param>
		/// <param name="SearchAsFormatted">object SearchAsFormatted</param>
		/// <param name="OnlyCurrentField">NetOffice.AccessApi.Enums.AcFindField OnlyCurrentField</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void FindRecord(object findWhat, NetOffice.AccessApi.Enums.AcFindMatch match, object matchCase, NetOffice.AccessApi.Enums.AcSearchDirection search, object searchAsFormatted, NetOffice.AccessApi.Enums.AcFindField onlyCurrentField)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(findWhat, match, matchCase, search, searchAsFormatted, onlyCurrentField);
			Invoker.Method(this, "FindRecord", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ControlName">object ControlName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void GoToControl(object controlName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(controlName);
			Invoker.Method(this, "GoToControl", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="PageNumber">object PageNumber</param>
		/// <param name="Right">optional object Right</param>
		/// <param name="Down">optional object Down</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void GoToPage(object pageNumber, object right, object down)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pageNumber, right, down);
			Invoker.Method(this, "GoToPage", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="PageNumber">object PageNumber</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void GoToPage(object pageNumber)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pageNumber);
			Invoker.Method(this, "GoToPage", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcDataObjectType ObjectType</param>
		/// <param name="ObjectName">object ObjectName</param>
		/// <param name="Record">NetOffice.AccessApi.Enums.AcRecord Record</param>
		/// <param name="Offset">optional object Offset</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void GoToRecord(NetOffice.AccessApi.Enums.AcDataObjectType objectType, object objectName, NetOffice.AccessApi.Enums.AcRecord record, object offset)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, record, offset);
			Invoker.Method(this, "GoToRecord", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcDataObjectType ObjectType</param>
		/// <param name="ObjectName">object ObjectName</param>
		/// <param name="Record">NetOffice.AccessApi.Enums.AcRecord Record</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void GoToRecord(NetOffice.AccessApi.Enums.AcDataObjectType objectType, object objectName, NetOffice.AccessApi.Enums.AcRecord record)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, record);
			Invoker.Method(this, "GoToRecord", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="HourglassOn">object HourglassOn</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Hourglass(object hourglassOn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(hourglassOn);
			Invoker.Method(this, "Hourglass", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Maximize()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Maximize", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Minimize()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Minimize", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Right">optional object Right</param>
		/// <param name="Down">optional object Down</param>
		/// <param name="Width">optional object Width</param>
		/// <param name="Height">optional object Height</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void MoveSize(object right, object down, object width, object height)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(right, down, width, height);
			Invoker.Method(this, "MoveSize", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void MoveSize()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "MoveSize", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="FormName">object FormName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcFormView View</param>
		/// <param name="FilterName">object FilterName</param>
		/// <param name="WhereCondition">object WhereCondition</param>
		/// <param name="DataMode">NetOffice.AccessApi.Enums.AcFormOpenDataMode DataMode</param>
		/// <param name="WindowMode">NetOffice.AccessApi.Enums.AcWindowMode WindowMode</param>
		/// <param name="OpenArgs">optional object OpenArgs</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenForm(object formName, NetOffice.AccessApi.Enums.AcFormView view, object filterName, object whereCondition, NetOffice.AccessApi.Enums.AcFormOpenDataMode dataMode, NetOffice.AccessApi.Enums.AcWindowMode windowMode, object openArgs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(formName, view, filterName, whereCondition, dataMode, windowMode, openArgs);
			Invoker.Method(this, "OpenForm", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="FormName">object FormName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcFormView View</param>
		/// <param name="FilterName">object FilterName</param>
		/// <param name="WhereCondition">object WhereCondition</param>
		/// <param name="DataMode">NetOffice.AccessApi.Enums.AcFormOpenDataMode DataMode</param>
		/// <param name="WindowMode">NetOffice.AccessApi.Enums.AcWindowMode WindowMode</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenForm(object formName, NetOffice.AccessApi.Enums.AcFormView view, object filterName, object whereCondition, NetOffice.AccessApi.Enums.AcFormOpenDataMode dataMode, NetOffice.AccessApi.Enums.AcWindowMode windowMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(formName, view, filterName, whereCondition, dataMode, windowMode);
			Invoker.Method(this, "OpenForm", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="QueryName">object QueryName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="DataMode">NetOffice.AccessApi.Enums.AcOpenDataMode DataMode</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenQuery(object queryName, NetOffice.AccessApi.Enums.AcView view, NetOffice.AccessApi.Enums.AcOpenDataMode dataMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(queryName, view, dataMode);
			Invoker.Method(this, "OpenQuery", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="TableName">object TableName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="DataMode">NetOffice.AccessApi.Enums.AcOpenDataMode DataMode</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenTable(object tableName, NetOffice.AccessApi.Enums.AcView view, NetOffice.AccessApi.Enums.AcOpenDataMode dataMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(tableName, view, dataMode);
			Invoker.Method(this, "OpenTable", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="PrintRange">NetOffice.AccessApi.Enums.AcPrintRange PrintRange</param>
		/// <param name="PageFrom">object PageFrom</param>
		/// <param name="PageTo">object PageTo</param>
		/// <param name="PrintQuality">NetOffice.AccessApi.Enums.AcPrintQuality PrintQuality</param>
		/// <param name="Copies">optional object Copies</param>
		/// <param name="CollateCopies">optional object CollateCopies</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void PrintOut(NetOffice.AccessApi.Enums.AcPrintRange printRange, object pageFrom, object pageTo, NetOffice.AccessApi.Enums.AcPrintQuality printQuality, object copies, object collateCopies)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(printRange, pageFrom, pageTo, printQuality, copies, collateCopies);
			Invoker.Method(this, "PrintOut", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="PrintRange">NetOffice.AccessApi.Enums.AcPrintRange PrintRange</param>
		/// <param name="PageFrom">object PageFrom</param>
		/// <param name="PageTo">object PageTo</param>
		/// <param name="PrintQuality">NetOffice.AccessApi.Enums.AcPrintQuality PrintQuality</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void PrintOut(NetOffice.AccessApi.Enums.AcPrintRange printRange, object pageFrom, object pageTo, NetOffice.AccessApi.Enums.AcPrintQuality printQuality)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(printRange, pageFrom, pageTo, printQuality);
			Invoker.Method(this, "PrintOut", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Options">NetOffice.AccessApi.Enums.AcQuitOption Options</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Quit(NetOffice.AccessApi.Enums.AcQuitOption options)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(options);
			Invoker.Method(this, "Quit", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ControlName">optional object ControlName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Requery(object controlName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(controlName);
			Invoker.Method(this, "Requery", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Requery()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Requery", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void RepaintObject(NetOffice.AccessApi.Enums.AcObjectType objectType, object objectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName);
			Invoker.Method(this, "RepaintObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void RepaintObject(NetOffice.AccessApi.Enums.AcObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType);
			Invoker.Method(this, "RepaintObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="NewName">object NewName</param>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		/// <param name="OldName">optional object OldName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Rename(object newName, NetOffice.AccessApi.Enums.AcObjectType objectType, object oldName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(newName, objectType, oldName);
			Invoker.Method(this, "Rename", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="NewName">object NewName</param>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Rename(object newName, NetOffice.AccessApi.Enums.AcObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(newName, objectType);
			Invoker.Method(this, "Rename", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Restore()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "Restore", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="MacroName">object MacroName</param>
		/// <param name="RepeatCount">optional object RepeatCount</param>
		/// <param name="RepeatExpression">optional object RepeatExpression</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void RunMacro(object macroName, object repeatCount, object repeatExpression)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(macroName, repeatCount, repeatExpression);
			Invoker.Method(this, "RunMacro", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="MacroName">object MacroName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void RunMacro(object macroName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(macroName);
			Invoker.Method(this, "RunMacro", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="SQLStatement">object SQLStatement</param>
		/// <param name="UseTransaction">optional object UseTransaction</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void RunSQL(object sQLStatement, object useTransaction)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(sQLStatement, useTransaction);
			Invoker.Method(this, "RunSQL", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="SQLStatement">object SQLStatement</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void RunSQL(object sQLStatement)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(sQLStatement);
			Invoker.Method(this, "RunSQL", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		/// <param name="InDatabaseWindow">optional object InDatabaseWindow</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void SelectObject(NetOffice.AccessApi.Enums.AcObjectType objectType, object objectName, object inDatabaseWindow)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, inDatabaseWindow);
			Invoker.Method(this, "SelectObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void SelectObject(NetOffice.AccessApi.Enums.AcObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType);
			Invoker.Method(this, "SelectObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="WarningsOn">object WarningsOn</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void SetWarnings(object warningsOn)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(warningsOn);
			Invoker.Method(this, "SetWarnings", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void ShowAllRecords()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "ShowAllRecords", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9
		/// </summary>
		/// <param name="ReportName">object ReportName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="FilterName">optional object FilterName</param>
		/// <param name="WhereCondition">optional object WhereCondition</param>
		[SupportByLibrary("Access", 9)]
		public void OpenReport(object reportName, NetOffice.AccessApi.Enums.AcView view, object filterName, object whereCondition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(reportName, view, filterName, whereCondition);
			Invoker.Method(this, "OpenReport", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="ReportName">object ReportName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="FilterName">object FilterName</param>
		/// <param name="WhereCondition">object WhereCondition</param>
		/// <param name="WindowMode">NetOffice.AccessApi.Enums.AcWindowMode WindowMode</param>
		/// <param name="OpenArgs">optional object OpenArgs</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void OpenReport(object reportName, NetOffice.AccessApi.Enums.AcView view, object filterName, object whereCondition, NetOffice.AccessApi.Enums.AcWindowMode windowMode, object openArgs)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(reportName, view, filterName, whereCondition, windowMode, openArgs);
			Invoker.Method(this, "OpenReport", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9
		/// </summary>
		/// <param name="ReportName">object ReportName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		[SupportByLibrary("Access", 9)]
		public void OpenReport(object reportName, NetOffice.AccessApi.Enums.AcView view)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(reportName, view);
			Invoker.Method(this, "OpenReport", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="ReportName">object ReportName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="FilterName">object FilterName</param>
		/// <param name="WhereCondition">object WhereCondition</param>
		/// <param name="WindowMode">NetOffice.AccessApi.Enums.AcWindowMode WindowMode</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void OpenReport(object reportName, NetOffice.AccessApi.Enums.AcView view, object filterName, object whereCondition, NetOffice.AccessApi.Enums.AcWindowMode windowMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(reportName, view, filterName, whereCondition, windowMode);
			Invoker.Method(this, "OpenReport", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="TransferType">NetOffice.AccessApi.Enums.AcDataTransferType TransferType</param>
		/// <param name="DatabaseType">object DatabaseType</param>
		/// <param name="DatabaseName">object DatabaseName</param>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		/// <param name="Source">optional object Source</param>
		/// <param name="Destination">optional object Destination</param>
		/// <param name="StructureOnly">optional object StructureOnly</param>
		/// <param name="StoreLogin">optional object StoreLogin</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void TransferDatabase(NetOffice.AccessApi.Enums.AcDataTransferType transferType, object databaseType, object databaseName, NetOffice.AccessApi.Enums.AcObjectType objectType, object source, object destination, object structureOnly, object storeLogin)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(transferType, databaseType, databaseName, objectType, source, destination, structureOnly, storeLogin);
			Invoker.Method(this, "TransferDatabase", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="TransferType">NetOffice.AccessApi.Enums.AcDataTransferType TransferType</param>
		/// <param name="DatabaseType">object DatabaseType</param>
		/// <param name="DatabaseName">object DatabaseName</param>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void TransferDatabase(NetOffice.AccessApi.Enums.AcDataTransferType transferType, object databaseType, object databaseName, NetOffice.AccessApi.Enums.AcObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(transferType, databaseType, databaseName, objectType);
			Invoker.Method(this, "TransferDatabase", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="TransferType">NetOffice.AccessApi.Enums.AcDataTransferType TransferType</param>
		/// <param name="SpreadsheetType">NetOffice.AccessApi.Enums.AcSpreadSheetType SpreadsheetType</param>
		/// <param name="TableName">optional object TableName</param>
		/// <param name="FileName">optional object FileName</param>
		/// <param name="HasFieldNames">optional object HasFieldNames</param>
		/// <param name="Range">optional object Range</param>
		/// <param name="UseOA">optional object UseOA</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void TransferSpreadsheet(NetOffice.AccessApi.Enums.AcDataTransferType transferType, NetOffice.AccessApi.Enums.AcSpreadSheetType spreadsheetType, object tableName, object fileName, object hasFieldNames, object range, object useOA)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(transferType, spreadsheetType, tableName, fileName, hasFieldNames, range, useOA);
			Invoker.Method(this, "TransferSpreadsheet", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="TransferType">NetOffice.AccessApi.Enums.AcDataTransferType TransferType</param>
		/// <param name="SpreadsheetType">NetOffice.AccessApi.Enums.AcSpreadSheetType SpreadsheetType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void TransferSpreadsheet(NetOffice.AccessApi.Enums.AcDataTransferType transferType, NetOffice.AccessApi.Enums.AcSpreadSheetType spreadsheetType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(transferType, spreadsheetType);
			Invoker.Method(this, "TransferSpreadsheet", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="TransferType">NetOffice.AccessApi.Enums.AcTextTransferType TransferType</param>
		/// <param name="SpecificationName">optional object SpecificationName</param>
		/// <param name="TableName">optional object TableName</param>
		/// <param name="FileName">optional object FileName</param>
		/// <param name="HasFieldNames">optional object HasFieldNames</param>
		/// <param name="HTMLTableName">optional object HTMLTableName</param>
		/// <param name="CodePage">optional object CodePage</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void TransferText(NetOffice.AccessApi.Enums.AcTextTransferType transferType, object specificationName, object tableName, object fileName, object hasFieldNames, object hTMLTableName, object codePage)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(transferType, specificationName, tableName, fileName, hasFieldNames, hTMLTableName, codePage);
			Invoker.Method(this, "TransferText", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="TransferType">NetOffice.AccessApi.Enums.AcTextTransferType TransferType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void TransferText(NetOffice.AccessApi.Enums.AcTextTransferType transferType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(transferType);
			Invoker.Method(this, "TransferText", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcOutputObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		/// <param name="OutputFormat">optional object OutputFormat</param>
		/// <param name="OutputFile">optional object OutputFile</param>
		/// <param name="AutoStart">optional object AutoStart</param>
		/// <param name="TemplateFile">optional object TemplateFile</param>
		[SupportByLibrary("Access", 9)]
		public void OutputTo(NetOffice.AccessApi.Enums.AcOutputObjectType objectType, object objectName, object outputFormat, object outputFile, object autoStart, object templateFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, outputFormat, outputFile, autoStart, templateFile);
			Invoker.Method(this, "OutputTo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcOutputObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		/// <param name="OutputFormat">optional object OutputFormat</param>
		/// <param name="OutputFile">optional object OutputFile</param>
		/// <param name="AutoStart">optional object AutoStart</param>
		/// <param name="TemplateFile">optional object TemplateFile</param>
		/// <param name="Encoding">optional object Encoding</param>
		[SupportByLibrary("Access", 10,11)]
		public void OutputTo(NetOffice.AccessApi.Enums.AcOutputObjectType objectType, object objectName, object outputFormat, object outputFile, object autoStart, object templateFile, object encoding)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, outputFormat, outputFile, autoStart, templateFile, encoding);
			Invoker.Method(this, "OutputTo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcOutputObjectType ObjectType</param>
		/// <param name="ObjectName">object ObjectName</param>
		/// <param name="OutputFormat">object OutputFormat</param>
		/// <param name="OutputFile">object OutputFile</param>
		/// <param name="AutoStart">object AutoStart</param>
		/// <param name="TemplateFile">object TemplateFile</param>
		/// <param name="Encoding">object Encoding</param>
		/// <param name="OutputQuality">NetOffice.AccessApi.Enums.AcExportQuality OutputQuality</param>
		[SupportByLibrary("Access", 12,14)]
		public void OutputTo(NetOffice.AccessApi.Enums.AcOutputObjectType objectType, object objectName, object outputFormat, object outputFile, object autoStart, object templateFile, object encoding, NetOffice.AccessApi.Enums.AcExportQuality outputQuality)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, outputFormat, outputFile, autoStart, templateFile, encoding, outputQuality);
			Invoker.Method(this, "OutputTo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcOutputObjectType ObjectType</param>
		[SupportByLibrary("Access", 9,10,11)]
		public void OutputTo(NetOffice.AccessApi.Enums.AcOutputObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType);
			Invoker.Method(this, "OutputTo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void DeleteObject(NetOffice.AccessApi.Enums.AcObjectType objectType, object objectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName);
			Invoker.Method(this, "DeleteObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void DeleteObject(NetOffice.AccessApi.Enums.AcObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType);
			Invoker.Method(this, "DeleteObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ModuleName">optional object ModuleName</param>
		/// <param name="ProcedureName">optional object ProcedureName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenModule(object moduleName, object procedureName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(moduleName, procedureName);
			Invoker.Method(this, "OpenModule", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenModule()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "OpenModule", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcSendObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		/// <param name="OutputFormat">optional object OutputFormat</param>
		/// <param name="To">optional object To</param>
		/// <param name="Cc">optional object Cc</param>
		/// <param name="Bcc">optional object Bcc</param>
		/// <param name="Subject">optional object Subject</param>
		/// <param name="MessageText">optional object MessageText</param>
		/// <param name="EditMessage">optional object EditMessage</param>
		/// <param name="TemplateFile">optional object TemplateFile</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void SendObject(NetOffice.AccessApi.Enums.AcSendObjectType objectType, object objectName, object outputFormat, object to, object cc, object bcc, object subject, object messageText, object editMessage, object templateFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, outputFormat, to, cc, bcc, subject, messageText, editMessage, templateFile);
			Invoker.Method(this, "SendObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcSendObjectType ObjectType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void SendObject(NetOffice.AccessApi.Enums.AcSendObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType);
			Invoker.Method(this, "SendObject", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ToolbarName">object ToolbarName</param>
		/// <param name="Show">NetOffice.AccessApi.Enums.AcShowToolbar Show</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void ShowToolbar(object toolbarName, NetOffice.AccessApi.Enums.AcShowToolbar show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(toolbarName, show);
			Invoker.Method(this, "ShowToolbar", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Save(NetOffice.AccessApi.Enums.AcObjectType objectType, object objectName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName);
			Invoker.Method(this, "Save", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcObjectType ObjectType</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void Save(NetOffice.AccessApi.Enums.AcObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType);
			Invoker.Method(this, "Save", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="MenuIndex">object MenuIndex</param>
		/// <param name="CommandIndex">optional object CommandIndex</param>
		/// <param name="SubcommandIndex">optional object SubcommandIndex</param>
		/// <param name="Flag">optional object Flag</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void SetMenuItem(object menuIndex, object commandIndex, object subcommandIndex, object flag)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(menuIndex, commandIndex, subcommandIndex, flag);
			Invoker.Method(this, "SetMenuItem", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="MenuIndex">object MenuIndex</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void SetMenuItem(object menuIndex)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(menuIndex);
			Invoker.Method(this, "SetMenuItem", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="Command">NetOffice.AccessApi.Enums.AcCommand Command</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void RunCommand(NetOffice.AccessApi.Enums.AcCommand command)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(command);
			Invoker.Method(this, "RunCommand", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="DataAccessPageName">object DataAccessPageName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcDataAccessPageView View</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenDataAccessPage(object dataAccessPageName, NetOffice.AccessApi.Enums.AcDataAccessPageView view)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(dataAccessPageName, view);
			Invoker.Method(this, "OpenDataAccessPage", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ViewName">object ViewName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="DataMode">NetOffice.AccessApi.Enums.AcOpenDataMode DataMode</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenView(object viewName, NetOffice.AccessApi.Enums.AcView view, NetOffice.AccessApi.Enums.AcOpenDataMode dataMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(viewName, view, dataMode);
			Invoker.Method(this, "OpenView", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="DiagramName">object DiagramName</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenDiagram(object diagramName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(diagramName);
			Invoker.Method(this, "OpenDiagram", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="ProcedureName">object ProcedureName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="DataMode">NetOffice.AccessApi.Enums.AcOpenDataMode DataMode</param>
		[SupportByLibrary("Access", 9,10,11,12,14)]
		public void OpenStoredProcedure(object procedureName, NetOffice.AccessApi.Enums.AcView view, NetOffice.AccessApi.Enums.AcOpenDataMode dataMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(procedureName, view, dataMode);
			Invoker.Method(this, "OpenStoredProcedure", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="ReportName">object ReportName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="FilterName">optional object FilterName</param>
		/// <param name="WhereCondition">optional object WhereCondition</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void OpenReportOld0(object reportName, NetOffice.AccessApi.Enums.AcView view, object filterName, object whereCondition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(reportName, view, filterName, whereCondition);
			Invoker.Method(this, "OpenReportOld0", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="ReportName">object ReportName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void OpenReportOld0(object reportName, NetOffice.AccessApi.Enums.AcView view)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(reportName, view);
			Invoker.Method(this, "OpenReportOld0", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcOutputObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		/// <param name="OutputFormat">optional object OutputFormat</param>
		/// <param name="OutputFile">optional object OutputFile</param>
		/// <param name="AutoStart">optional object AutoStart</param>
		/// <param name="TemplateFile">optional object TemplateFile</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void OutputToOld0(NetOffice.AccessApi.Enums.AcOutputObjectType objectType, object objectName, object outputFormat, object outputFile, object autoStart, object templateFile)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, outputFormat, outputFile, autoStart, templateFile);
			Invoker.Method(this, "OutputToOld0", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcOutputObjectType ObjectType</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void OutputToOld0(NetOffice.AccessApi.Enums.AcOutputObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType);
			Invoker.Method(this, "OutputToOld0", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="Server">object Server</param>
		/// <param name="Database">object Database</param>
		/// <param name="UseTrustedConnection">optional object UseTrustedConnection</param>
		/// <param name="Login">optional object Login</param>
		/// <param name="Password">optional object Password</param>
		/// <param name="TransferCopyData">optional object TransferCopyData</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void TransferSQLDatabase(object server, object database, object useTrustedConnection, object login, object password, object transferCopyData)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(server, database, useTrustedConnection, login, password, transferCopyData);
			Invoker.Method(this, "TransferSQLDatabase", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="Server">object Server</param>
		/// <param name="Database">object Database</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void TransferSQLDatabase(object server, object database)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(server, database);
			Invoker.Method(this, "TransferSQLDatabase", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="DatabaseFileName">object DatabaseFileName</param>
		/// <param name="OverwriteExistingFile">optional object OverwriteExistingFile</param>
		/// <param name="DisconnectAllUsers">optional object DisconnectAllUsers</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void CopyDatabaseFile(object databaseFileName, object overwriteExistingFile, object disconnectAllUsers)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(databaseFileName, overwriteExistingFile, disconnectAllUsers);
			Invoker.Method(this, "CopyDatabaseFile", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="DatabaseFileName">object DatabaseFileName</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void CopyDatabaseFile(object databaseFileName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(databaseFileName);
			Invoker.Method(this, "CopyDatabaseFile", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 10, 11, 12, 14
		/// </summary>
		/// <param name="FunctionName">object FunctionName</param>
		/// <param name="View">NetOffice.AccessApi.Enums.AcView View</param>
		/// <param name="DataMode">NetOffice.AccessApi.Enums.AcOpenDataMode DataMode</param>
		[SupportByLibrary("Access", 10,11,12,14)]
		public void OpenFunction(object functionName, NetOffice.AccessApi.Enums.AcView view, NetOffice.AccessApi.Enums.AcOpenDataMode dataMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(functionName, view, dataMode);
			Invoker.Method(this, "OpenFunction", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="FilterName">optional object FilterName</param>
		/// <param name="WhereCondition">optional object WhereCondition</param>
		[SupportByLibrary("Access", 12,14)]
		public void ApplyFilterOld0(object filterName, object whereCondition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filterName, whereCondition);
			Invoker.Method(this, "ApplyFilterOld0", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		[SupportByLibrary("Access", 12,14)]
		public void ApplyFilterOld0()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "ApplyFilterOld0", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcOutputObjectType ObjectType</param>
		/// <param name="ObjectName">optional object ObjectName</param>
		/// <param name="OutputFormat">optional object OutputFormat</param>
		/// <param name="OutputFile">optional object OutputFile</param>
		/// <param name="AutoStart">optional object AutoStart</param>
		/// <param name="TemplateFile">optional object TemplateFile</param>
		/// <param name="Encoding">optional object Encoding</param>
		[SupportByLibrary("Access", 12,14)]
		public void OutputToOld1(NetOffice.AccessApi.Enums.AcOutputObjectType objectType, object objectName, object outputFormat, object outputFile, object autoStart, object templateFile, object encoding)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, outputFormat, outputFile, autoStart, templateFile, encoding);
			Invoker.Method(this, "OutputToOld1", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcOutputObjectType ObjectType</param>
		[SupportByLibrary("Access", 12,14)]
		public void OutputToOld1(NetOffice.AccessApi.Enums.AcOutputObjectType objectType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType);
			Invoker.Method(this, "OutputToOld1", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="TransferType">NetOffice.AccessApi.Enums.AcSharePointListTransferType TransferType</param>
		/// <param name="SiteAddress">object SiteAddress</param>
		/// <param name="ListID">object ListID</param>
		/// <param name="ViewID">optional object ViewID</param>
		/// <param name="TableName">optional object TableName</param>
		/// <param name="GetLookupDisplayValues">optional object GetLookupDisplayValues</param>
		[SupportByLibrary("Access", 12,14)]
		public void TransferSharePointList(NetOffice.AccessApi.Enums.AcSharePointListTransferType transferType, object siteAddress, object listID, object viewID, object tableName, object getLookupDisplayValues)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(transferType, siteAddress, listID, viewID, tableName, getLookupDisplayValues);
			Invoker.Method(this, "TransferSharePointList", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="TransferType">NetOffice.AccessApi.Enums.AcSharePointListTransferType TransferType</param>
		/// <param name="SiteAddress">object SiteAddress</param>
		/// <param name="ListID">object ListID</param>
		[SupportByLibrary("Access", 12,14)]
		public void TransferSharePointList(NetOffice.AccessApi.Enums.AcSharePointListTransferType transferType, object siteAddress, object listID)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(transferType, siteAddress, listID);
			Invoker.Method(this, "TransferSharePointList", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		[SupportByLibrary("Access", 12,14)]
		public void CloseDatabase()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "CloseDatabase", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="Category">optional object Category</param>
		/// <param name="Group">optional object Group</param>
		[SupportByLibrary("Access", 12,14)]
		public void NavigateTo(object category, object group)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(category, group);
			Invoker.Method(this, "NavigateTo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		[SupportByLibrary("Access", 12,14)]
		public void NavigateTo()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "NavigateTo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcDataObjectType ObjectType</param>
		/// <param name="ObjectName">object ObjectName</param>
		/// <param name="Record">NetOffice.AccessApi.Enums.AcRecord Record</param>
		/// <param name="WhereCondition">optional object WhereCondition</param>
		[SupportByLibrary("Access", 12,14)]
		public void SearchForRecord(NetOffice.AccessApi.Enums.AcDataObjectType objectType, object objectName, NetOffice.AccessApi.Enums.AcRecord record, object whereCondition)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, record, whereCondition);
			Invoker.Method(this, "SearchForRecord", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcDataObjectType ObjectType</param>
		/// <param name="ObjectName">object ObjectName</param>
		/// <param name="Record">NetOffice.AccessApi.Enums.AcRecord Record</param>
		[SupportByLibrary("Access", 12,14)]
		public void SearchForRecord(NetOffice.AccessApi.Enums.AcDataObjectType objectType, object objectName, NetOffice.AccessApi.Enums.AcRecord record)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, record);
			Invoker.Method(this, "SearchForRecord", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="ControlName">object ControlName</param>
		/// <param name="Property">NetOffice.AccessApi.Enums.AcProperty Property</param>
		/// <param name="Value">optional object Value</param>
		[SupportByLibrary("Access", 12,14)]
		public void SetProperty(object controlName, NetOffice.AccessApi.Enums.AcProperty property, object value)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(controlName, property, value);
			Invoker.Method(this, "SetProperty", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="ControlName">object ControlName</param>
		/// <param name="Property">NetOffice.AccessApi.Enums.AcProperty Property</param>
		[SupportByLibrary("Access", 12,14)]
		public void SetProperty(object controlName, NetOffice.AccessApi.Enums.AcProperty property)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(controlName, property);
			Invoker.Method(this, "SetProperty", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		[SupportByLibrary("Access", 12,14)]
		public void SingleStep()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "SingleStep", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		[SupportByLibrary("Access", 12,14)]
		public void ClearMacroError()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "ClearMacroError", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="Show">object Show</param>
		/// <param name="Category">optional object Category</param>
		[SupportByLibrary("Access", 12,14)]
		public void SetDisplayedCategories(object show, object category)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show, category);
			Invoker.Method(this, "SetDisplayedCategories", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="Show">object Show</param>
		[SupportByLibrary("Access", 12,14)]
		public void SetDisplayedCategories(object show)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(show);
			Invoker.Method(this, "SetDisplayedCategories", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="Lock">object Lock</param>
		[SupportByLibrary("Access", 12,14)]
		public void LockNavigationPane(object _lock)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(_lock);
			Invoker.Method(this, "LockNavigationPane", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 12, 14
		/// </summary>
		/// <param name="SavedImportExportName">object SavedImportExportName</param>
		[SupportByLibrary("Access", 12,14)]
		public void RunSavedImportExport(object savedImportExportName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(savedImportExportName);
			Invoker.Method(this, "RunSavedImportExport", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		/// <param name="ObjectType">NetOffice.AccessApi.Enums.AcBrowseToObjectType ObjectType</param>
		/// <param name="ObjectName">object ObjectName</param>
		/// <param name="PathtoSubformControl">object PathtoSubformControl</param>
		/// <param name="WhereCondition">object WhereCondition</param>
		/// <param name="Page">object Page</param>
		/// <param name="DataMode">NetOffice.AccessApi.Enums.AcFormOpenDataMode DataMode</param>
		[SupportByLibrary("Access", 14)]
		public void BrowseTo(NetOffice.AccessApi.Enums.AcBrowseToObjectType objectType, object objectName, object pathtoSubformControl, object whereCondition, object page, NetOffice.AccessApi.Enums.AcFormOpenDataMode dataMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(objectType, objectName, pathtoSubformControl, whereCondition, page, dataMode);
			Invoker.Method(this, "BrowseTo", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		/// <param name="Name">object Name</param>
		/// <param name="Expression">object Expression</param>
		[SupportByLibrary("Access", 14)]
		public void SetParameter(object name, object expression)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(name, expression);
			Invoker.Method(this, "SetParameter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		/// <param name="MacroName">object MacroName</param>
		[SupportByLibrary("Access", 14)]
		public void RunDataMacro(object macroName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(macroName);
			Invoker.Method(this, "RunDataMacro", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		/// <param name="OrderBy">object OrderBy</param>
		/// <param name="ControlName">optional object ControlName</param>
		[SupportByLibrary("Access", 14)]
		public void SetOrderBy(object orderBy, object controlName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(orderBy, controlName);
			Invoker.Method(this, "SetOrderBy", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		/// <param name="OrderBy">object OrderBy</param>
		[SupportByLibrary("Access", 14)]
		public void SetOrderBy(object orderBy)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(orderBy);
			Invoker.Method(this, "SetOrderBy", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		/// <param name="FilterName">optional object FilterName</param>
		/// <param name="WhereCondition">optional object WhereCondition</param>
		/// <param name="ControlName">optional object ControlName</param>
		[SupportByLibrary("Access", 14)]
		public void SetFilter(object filterName, object whereCondition, object controlName)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(filterName, whereCondition, controlName);
			Invoker.Method(this, "SetFilter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public void SetFilter()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "SetFilter", paramsArray);
		}

		/// <summary>
		/// SupportByLibrary Access 14
		/// </summary>
		[SupportByLibrary("Access", 14)]
		public void RefreshRecord()
		{
			object[] paramsArray = null;
			Invoker.Method(this, "RefreshRecord", paramsArray);
		}

		#endregion
		#pragma warning restore
	}
}