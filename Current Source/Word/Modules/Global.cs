//Generated by LateBindingApi.CodeGenerator
using System;
using NetRuntimeSystem = System;
using System.ComponentModel;
using LateBindingApi.Core;
namespace NetOffice.WordApi
{
	///<summary>
	/// Module Global
	///</summary>
	[SupportByVersionAttribute("Word", 9,10,11,12,14)]
	[EntityTypeAttribute(EntityType.IsModule)]
	public static class Global
	{

		#region Fields

		private static COMObject _instance;

        internal static COMObject Instance
        {
	        get
	        {
		        return _instance;
	        }
	        set
	        {
		        if( (null == value) || (null == _instance) )
			        _instance = value;				
        	}
        }

		#endregion
		#region Properties

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Application Application
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Application", paramsArray);
				NetOffice.WordApi.Application newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Application.LateBindingApiWrapperType) as NetOffice.WordApi.Application;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Int32 Creator
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Creator", paramsArray);
				return NetRuntimeSystem.Convert.ToInt32(returnItem);
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// Unknown COM Proxy
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static object Parent
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Parent", paramsArray);
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(_instance,returnItem);
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static string Name
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Name", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Documents Documents
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Documents", paramsArray);
				NetOffice.WordApi.Documents newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Documents.LateBindingApiWrapperType) as NetOffice.WordApi.Documents;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Windows Windows
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Windows", paramsArray);
				NetOffice.WordApi.Windows newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Windows.LateBindingApiWrapperType) as NetOffice.WordApi.Windows;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Document ActiveDocument
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ActiveDocument", paramsArray);
				NetOffice.WordApi.Document newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Document.LateBindingApiWrapperType) as NetOffice.WordApi.Document;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Window ActiveWindow
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ActiveWindow", paramsArray);
				NetOffice.WordApi.Window newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Window.LateBindingApiWrapperType) as NetOffice.WordApi.Window;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Selection Selection
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Selection", paramsArray);
				NetOffice.WordApi.Selection newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Selection.LateBindingApiWrapperType) as NetOffice.WordApi.Selection;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// Unknown COM Proxy
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static object WordBasic
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "WordBasic", paramsArray);
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(_instance,returnItem);
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool PrintPreview
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "PrintPreview", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "PrintPreview", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.RecentFiles RecentFiles
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "RecentFiles", paramsArray);
				NetOffice.WordApi.RecentFiles newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.RecentFiles.LateBindingApiWrapperType) as NetOffice.WordApi.RecentFiles;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Template NormalTemplate
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "NormalTemplate", paramsArray);
				NetOffice.WordApi.Template newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Template.LateBindingApiWrapperType) as NetOffice.WordApi.Template;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.System System
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "System", paramsArray);
				NetOffice.WordApi.System newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.System.LateBindingApiWrapperType) as NetOffice.WordApi.System;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.AutoCorrect AutoCorrect
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AutoCorrect", paramsArray);
				NetOffice.WordApi.AutoCorrect newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.AutoCorrect.LateBindingApiWrapperType) as NetOffice.WordApi.AutoCorrect;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.FontNames FontNames
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "FontNames", paramsArray);
				NetOffice.WordApi.FontNames newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.FontNames.LateBindingApiWrapperType) as NetOffice.WordApi.FontNames;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.FontNames LandscapeFontNames
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LandscapeFontNames", paramsArray);
				NetOffice.WordApi.FontNames newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.FontNames.LateBindingApiWrapperType) as NetOffice.WordApi.FontNames;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.FontNames PortraitFontNames
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "PortraitFontNames", paramsArray);
				NetOffice.WordApi.FontNames newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.FontNames.LateBindingApiWrapperType) as NetOffice.WordApi.FontNames;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Languages Languages
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Languages", paramsArray);
				NetOffice.WordApi.Languages newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Languages.LateBindingApiWrapperType) as NetOffice.WordApi.Languages;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.OfficeApi.Assistant Assistant
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Assistant", paramsArray);
				NetOffice.OfficeApi.Assistant newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.Assistant.LateBindingApiWrapperType) as NetOffice.OfficeApi.Assistant;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.FileConverters FileConverters
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "FileConverters", paramsArray);
				NetOffice.WordApi.FileConverters newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.FileConverters.LateBindingApiWrapperType) as NetOffice.WordApi.FileConverters;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Dialogs Dialogs
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Dialogs", paramsArray);
				NetOffice.WordApi.Dialogs newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Dialogs.LateBindingApiWrapperType) as NetOffice.WordApi.Dialogs;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.CaptionLabels CaptionLabels
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CaptionLabels", paramsArray);
				NetOffice.WordApi.CaptionLabels newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.CaptionLabels.LateBindingApiWrapperType) as NetOffice.WordApi.CaptionLabels;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.AutoCaptions AutoCaptions
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AutoCaptions", paramsArray);
				NetOffice.WordApi.AutoCaptions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.AutoCaptions.LateBindingApiWrapperType) as NetOffice.WordApi.AutoCaptions;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.AddIns AddIns
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AddIns", paramsArray);
				NetOffice.WordApi.AddIns newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.AddIns.LateBindingApiWrapperType) as NetOffice.WordApi.AddIns;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Tasks Tasks
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Tasks", paramsArray);
				NetOffice.WordApi.Tasks newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Tasks.LateBindingApiWrapperType) as NetOffice.WordApi.Tasks;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// Unknown COM Proxy
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static object MacroContainer
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "MacroContainer", paramsArray);
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(_instance,returnItem);
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.OfficeApi.CommandBars CommandBars
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CommandBars", paramsArray);
				NetOffice.OfficeApi.CommandBars newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.CommandBars.LateBindingApiWrapperType) as NetOffice.OfficeApi.CommandBars;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="languageID">optional object LanguageID</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static NetOffice.WordApi.SynonymInfo get_SynonymInfo(string word, object languageID)
		{		
			object[] paramsArray = Invoker.ValidateParamsArray(word, languageID);
			object returnItem = Invoker.PropertyGet(_instance, "SynonymInfo", paramsArray);
			NetOffice.WordApi.SynonymInfo newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.SynonymInfo.LateBindingApiWrapperType) as NetOffice.WordApi.SynonymInfo;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Alias for get_SynonymInfo
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="languageID">optional object LanguageID</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SynonymInfo SynonymInfo(string word, object languageID)
		{
			return get_SynonymInfo(word, languageID);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="word">string Word</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static NetOffice.WordApi.SynonymInfo get_SynonymInfo(string word)
		{		
			object[] paramsArray = Invoker.ValidateParamsArray(word);
			object returnItem = Invoker.PropertyGet(_instance, "SynonymInfo", paramsArray);
			NetOffice.WordApi.SynonymInfo newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.SynonymInfo.LateBindingApiWrapperType) as NetOffice.WordApi.SynonymInfo;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Alias for get_SynonymInfo
		/// </summary>
		/// <param name="word">string Word</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SynonymInfo SynonymInfo(string word)
		{
			return get_SynonymInfo(word);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.VBIDEApi.VBE VBE
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "VBE", paramsArray);
				NetOffice.VBIDEApi.VBE newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.VBIDEApi.VBE.LateBindingApiWrapperType) as NetOffice.VBIDEApi.VBE;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.ListGalleries ListGalleries
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ListGalleries", paramsArray);
				NetOffice.WordApi.ListGalleries newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.ListGalleries.LateBindingApiWrapperType) as NetOffice.WordApi.ListGalleries;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static string ActivePrinter
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ActivePrinter", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ActivePrinter", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Templates Templates
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Templates", paramsArray);
				NetOffice.WordApi.Templates newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Templates.LateBindingApiWrapperType) as NetOffice.WordApi.Templates;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get/Set
		/// Unknown COM Proxy
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static object CustomizationContext
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CustomizationContext", paramsArray);
				COMObject newObject = LateBindingApi.Core.Factory.CreateObjectFromComProxy(_instance,returnItem);
				return newObject;
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "CustomizationContext", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.KeyBindings KeyBindings
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "KeyBindings", paramsArray);
				NetOffice.WordApi.KeyBindings newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.KeyBindings.LateBindingApiWrapperType) as NetOffice.WordApi.KeyBindings;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="keyCategory">NetOffice.WordApi.Enums.WdKeyCategory KeyCategory</param>
		/// <param name="command">string Command</param>
		/// <param name="commandParameter">optional object CommandParameter</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static NetOffice.WordApi.KeysBoundTo get_KeysBoundTo(NetOffice.WordApi.Enums.WdKeyCategory keyCategory, string command, object commandParameter)
		{		
			object[] paramsArray = Invoker.ValidateParamsArray(keyCategory, command, commandParameter);
			object returnItem = Invoker.PropertyGet(_instance, "KeysBoundTo", paramsArray);
			NetOffice.WordApi.KeysBoundTo newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.KeysBoundTo.LateBindingApiWrapperType) as NetOffice.WordApi.KeysBoundTo;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Alias for get_KeysBoundTo
		/// </summary>
		/// <param name="keyCategory">NetOffice.WordApi.Enums.WdKeyCategory KeyCategory</param>
		/// <param name="command">string Command</param>
		/// <param name="commandParameter">optional object CommandParameter</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.KeysBoundTo KeysBoundTo(NetOffice.WordApi.Enums.WdKeyCategory keyCategory, string command, object commandParameter)
		{
			return get_KeysBoundTo(keyCategory, command, commandParameter);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="keyCategory">NetOffice.WordApi.Enums.WdKeyCategory KeyCategory</param>
		/// <param name="command">string Command</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static NetOffice.WordApi.KeysBoundTo get_KeysBoundTo(NetOffice.WordApi.Enums.WdKeyCategory keyCategory, string command)
		{		
			object[] paramsArray = Invoker.ValidateParamsArray(keyCategory, command);
			object returnItem = Invoker.PropertyGet(_instance, "KeysBoundTo", paramsArray);
			NetOffice.WordApi.KeysBoundTo newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.KeysBoundTo.LateBindingApiWrapperType) as NetOffice.WordApi.KeysBoundTo;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Alias for get_KeysBoundTo
		/// </summary>
		/// <param name="keyCategory">NetOffice.WordApi.Enums.WdKeyCategory KeyCategory</param>
		/// <param name="command">string Command</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.KeysBoundTo KeysBoundTo(NetOffice.WordApi.Enums.WdKeyCategory keyCategory, string command)
		{
			return get_KeysBoundTo(keyCategory, command);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="keyCode">Int32 KeyCode</param>
		/// <param name="keyCode2">optional object KeyCode2</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static NetOffice.WordApi.KeyBinding get_FindKey(Int32 keyCode, object keyCode2)
		{		
			object[] paramsArray = Invoker.ValidateParamsArray(keyCode, keyCode2);
			object returnItem = Invoker.PropertyGet(_instance, "FindKey", paramsArray);
			NetOffice.WordApi.KeyBinding newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.KeyBinding.LateBindingApiWrapperType) as NetOffice.WordApi.KeyBinding;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Alias for get_FindKey
		/// </summary>
		/// <param name="keyCode">Int32 KeyCode</param>
		/// <param name="keyCode2">optional object KeyCode2</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.KeyBinding FindKey(Int32 keyCode, object keyCode2)
		{
			return get_FindKey(keyCode, keyCode2);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="keyCode">Int32 KeyCode</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static NetOffice.WordApi.KeyBinding get_FindKey(Int32 keyCode)
		{		
			object[] paramsArray = Invoker.ValidateParamsArray(keyCode);
			object returnItem = Invoker.PropertyGet(_instance, "FindKey", paramsArray);
			NetOffice.WordApi.KeyBinding newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.KeyBinding.LateBindingApiWrapperType) as NetOffice.WordApi.KeyBinding;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Alias for get_FindKey
		/// </summary>
		/// <param name="keyCode">Int32 KeyCode</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.KeyBinding FindKey(Int32 keyCode)
		{
			return get_FindKey(keyCode);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Options Options
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "Options", paramsArray);
				NetOffice.WordApi.Options newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Options.LateBindingApiWrapperType) as NetOffice.WordApi.Options;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Dictionaries CustomDictionaries
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "CustomDictionaries", paramsArray);
				NetOffice.WordApi.Dictionaries newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.Dictionaries.LateBindingApiWrapperType) as NetOffice.WordApi.Dictionaries;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static string StatusBar
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "StatusBar", paramsArray);
				return NetRuntimeSystem.Convert.ToString(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "StatusBar", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get/Set
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool ShowVisualBasicEditor
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ShowVisualBasicEditor", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
			set
			{
				object[] paramsArray = Invoker.ValidateParamsArray(value);
				Invoker.PropertySet(_instance, "ShowVisualBasicEditor", paramsArray);
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		/// <param name="_object">object Object</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
		public static bool get_IsObjectValid(object _object)
		{		
			object[] paramsArray = Invoker.ValidateParamsArray(_object);
			object returnItem = Invoker.PropertyGet(_instance, "IsObjectValid", paramsArray);
			return NetRuntimeSystem.Convert.ToBoolean(returnItem);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Alias for get_IsObjectValid
		/// </summary>
		/// <param name="_object">object Object</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool IsObjectValid(object _object)
		{
			return get_IsObjectValid(_object);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.HangulHanjaConversionDictionaries HangulHanjaDictionaries
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "HangulHanjaDictionaries", paramsArray);
				NetOffice.WordApi.HangulHanjaConversionDictionaries newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.HangulHanjaConversionDictionaries.LateBindingApiWrapperType) as NetOffice.WordApi.HangulHanjaConversionDictionaries;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.OfficeApi.LanguageSettings LanguageSettings
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "LanguageSettings", paramsArray);
				NetOffice.OfficeApi.LanguageSettings newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.LanguageSettings.LateBindingApiWrapperType) as NetOffice.OfficeApi.LanguageSettings;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.OfficeApi.AnswerWizard AnswerWizard
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AnswerWizard", paramsArray);
				NetOffice.OfficeApi.AnswerWizard newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.OfficeApi.AnswerWizard.LateBindingApiWrapperType) as NetOffice.OfficeApi.AnswerWizard;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 10, 11, 12, 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 10,11,12,14)]
		public static NetOffice.WordApi.AutoCorrect AutoCorrectEmail
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "AutoCorrectEmail", paramsArray);
				NetOffice.WordApi.AutoCorrect newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.AutoCorrect.LateBindingApiWrapperType) as NetOffice.WordApi.AutoCorrect;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 14)]
		public static NetOffice.WordApi.ProtectedViewWindows ProtectedViewWindows
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ProtectedViewWindows", paramsArray);
				NetOffice.WordApi.ProtectedViewWindows newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.ProtectedViewWindows.LateBindingApiWrapperType) as NetOffice.WordApi.ProtectedViewWindows;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 14)]
		public static NetOffice.WordApi.ProtectedViewWindow ActiveProtectedViewWindow
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "ActiveProtectedViewWindow", paramsArray);
				NetOffice.WordApi.ProtectedViewWindow newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance,returnItem,NetOffice.WordApi.ProtectedViewWindow.LateBindingApiWrapperType) as NetOffice.WordApi.ProtectedViewWindow;
				return newObject;
			}
		}

		/// <summary>
		/// SupportByVersion Word 14
		/// Get
		/// </summary>
		[SupportByVersionAttribute("Word", 14)]
		public static bool IsSandboxed
		{
			get
			{
				object[] paramsArray = null;
				object returnItem = Invoker.PropertyGet(_instance, "IsSandboxed", paramsArray);
				return NetRuntimeSystem.Convert.ToBoolean(returnItem);
			}
		}

		#endregion

		#region Methods

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="times">optional object Times</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool Repeat(object times)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(times);
			object returnItem = Invoker.MethodReturn(_instance, "Repeat", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool Repeat()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "Repeat", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="channel">Int32 Channel</param>
		/// <param name="command">string Command</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static void DDEExecute(Int32 channel, string command)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(channel, command);
			Invoker.Method(_instance, "DDEExecute", paramsArray);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="app">string App</param>
		/// <param name="topic">string Topic</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Int32 DDEInitiate(string app, string topic)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(app, topic);
			object returnItem = Invoker.MethodReturn(_instance, "DDEInitiate", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="channel">Int32 Channel</param>
		/// <param name="item">string Item</param>
		/// <param name="data">string Data</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static void DDEPoke(Int32 channel, string item, string data)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(channel, item, data);
			Invoker.Method(_instance, "DDEPoke", paramsArray);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="channel">Int32 Channel</param>
		/// <param name="item">string Item</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static string DDERequest(Int32 channel, string item)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(channel, item);
			object returnItem = Invoker.MethodReturn(_instance, "DDERequest", paramsArray);
			return (string)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="channel">Int32 Channel</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static void DDETerminate(Int32 channel)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(channel);
			Invoker.Method(_instance, "DDETerminate", paramsArray);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static void DDETerminateAll()
		{
			object[] paramsArray = null;
			Invoker.Method(_instance, "DDETerminateAll", paramsArray);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="arg1">NetOffice.WordApi.Enums.WdKey Arg1</param>
		/// <param name="arg2">optional object Arg2</param>
		/// <param name="arg3">optional object Arg3</param>
		/// <param name="arg4">optional object Arg4</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Int32 BuildKeyCode(NetOffice.WordApi.Enums.WdKey arg1, object arg2, object arg3, object arg4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(arg1, arg2, arg3, arg4);
			object returnItem = Invoker.MethodReturn(_instance, "BuildKeyCode", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="arg1">NetOffice.WordApi.Enums.WdKey Arg1</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Int32 BuildKeyCode(NetOffice.WordApi.Enums.WdKey arg1)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(arg1);
			object returnItem = Invoker.MethodReturn(_instance, "BuildKeyCode", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="arg1">NetOffice.WordApi.Enums.WdKey Arg1</param>
		/// <param name="arg2">optional object Arg2</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Int32 BuildKeyCode(NetOffice.WordApi.Enums.WdKey arg1, object arg2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(arg1, arg2);
			object returnItem = Invoker.MethodReturn(_instance, "BuildKeyCode", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="arg1">NetOffice.WordApi.Enums.WdKey Arg1</param>
		/// <param name="arg2">optional object Arg2</param>
		/// <param name="arg3">optional object Arg3</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Int32 BuildKeyCode(NetOffice.WordApi.Enums.WdKey arg1, object arg2, object arg3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(arg1, arg2, arg3);
			object returnItem = Invoker.MethodReturn(_instance, "BuildKeyCode", paramsArray);
			return (Int32)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="keyCode">Int32 KeyCode</param>
		/// <param name="keyCode2">optional object KeyCode2</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static string KeyString(Int32 keyCode, object keyCode2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(keyCode, keyCode2);
			object returnItem = Invoker.MethodReturn(_instance, "KeyString", paramsArray);
			return (string)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="keyCode">Int32 KeyCode</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static string KeyString(Int32 keyCode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(keyCode);
			object returnItem = Invoker.MethodReturn(_instance, "KeyString", paramsArray);
			return (string)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		/// <param name="customDictionary7">optional object CustomDictionary7</param>
		/// <param name="customDictionary8">optional object CustomDictionary8</param>
		/// <param name="customDictionary9">optional object CustomDictionary9</param>
		/// <param name="customDictionary10">optional object CustomDictionary10</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6, object customDictionary7, object customDictionary8, object customDictionary9, object customDictionary10)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7, customDictionary8, customDictionary9, customDictionary10);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2, object customDictionary3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2, customDictionary3);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2, object customDictionary3, object customDictionary4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2, customDictionary3, customDictionary4);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2, customDictionary3, customDictionary4, customDictionary5);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		/// <param name="customDictionary7">optional object CustomDictionary7</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6, object customDictionary7)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		/// <param name="customDictionary7">optional object CustomDictionary7</param>
		/// <param name="customDictionary8">optional object CustomDictionary8</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6, object customDictionary7, object customDictionary8)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7, customDictionary8);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		/// <param name="customDictionary7">optional object CustomDictionary7</param>
		/// <param name="customDictionary8">optional object CustomDictionary8</param>
		/// <param name="customDictionary9">optional object CustomDictionary9</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static bool CheckSpelling(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6, object customDictionary7, object customDictionary8, object customDictionary9)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7, customDictionary8, customDictionary9);
			object returnItem = Invoker.MethodReturn(_instance, "CheckSpelling", paramsArray);
			return (bool)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		/// <param name="customDictionary7">optional object CustomDictionary7</param>
		/// <param name="customDictionary8">optional object CustomDictionary8</param>
		/// <param name="customDictionary9">optional object CustomDictionary9</param>
		/// <param name="customDictionary10">optional object CustomDictionary10</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6, object customDictionary7, object customDictionary8, object customDictionary9, object customDictionary10)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7, customDictionary8, customDictionary9, customDictionary10);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2, object customDictionary3)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2, object customDictionary3, object customDictionary4)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3, customDictionary4);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3, customDictionary4, customDictionary5);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		/// <param name="customDictionary7">optional object CustomDictionary7</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6, object customDictionary7)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		/// <param name="customDictionary7">optional object CustomDictionary7</param>
		/// <param name="customDictionary8">optional object CustomDictionary8</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6, object customDictionary7, object customDictionary8)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7, customDictionary8);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="word">string Word</param>
		/// <param name="customDictionary">optional object CustomDictionary</param>
		/// <param name="ignoreUppercase">optional object IgnoreUppercase</param>
		/// <param name="mainDictionary">optional object MainDictionary</param>
		/// <param name="suggestionMode">optional object SuggestionMode</param>
		/// <param name="customDictionary2">optional object CustomDictionary2</param>
		/// <param name="customDictionary3">optional object CustomDictionary3</param>
		/// <param name="customDictionary4">optional object CustomDictionary4</param>
		/// <param name="customDictionary5">optional object CustomDictionary5</param>
		/// <param name="customDictionary6">optional object CustomDictionary6</param>
		/// <param name="customDictionary7">optional object CustomDictionary7</param>
		/// <param name="customDictionary8">optional object CustomDictionary8</param>
		/// <param name="customDictionary9">optional object CustomDictionary9</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.SpellingSuggestions GetSpellingSuggestions(string word, object customDictionary, object ignoreUppercase, object mainDictionary, object suggestionMode, object customDictionary2, object customDictionary3, object customDictionary4, object customDictionary5, object customDictionary6, object customDictionary7, object customDictionary8, object customDictionary9)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(word, customDictionary, ignoreUppercase, mainDictionary, suggestionMode, customDictionary2, customDictionary3, customDictionary4, customDictionary5, customDictionary6, customDictionary7, customDictionary8, customDictionary9);
			object returnItem = Invoker.MethodReturn(_instance, "GetSpellingSuggestions", paramsArray);
			NetOffice.WordApi.SpellingSuggestions newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.SpellingSuggestions.LateBindingApiWrapperType) as NetOffice.WordApi.SpellingSuggestions;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="helpType">object HelpType</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static void Help(object helpType)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(helpType);
			Invoker.Method(_instance, "Help", paramsArray);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static NetOffice.WordApi.Window NewWindow()
		{
			object[] paramsArray = null;
			object returnItem = Invoker.MethodReturn(_instance, "NewWindow", paramsArray);
			NetOffice.WordApi.Window newObject = LateBindingApi.Core.Factory.CreateKnownObjectFromComProxy(_instance, returnItem,NetOffice.WordApi.Window.LateBindingApiWrapperType) as NetOffice.WordApi.Window;
			return newObject;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="_string">string String</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static string CleanString(string _string)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(_string);
			object returnItem = Invoker.MethodReturn(_instance, "CleanString", paramsArray);
			return (string)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="path">string Path</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static void ChangeFileOpenDirectory(string path)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(path);
			Invoker.Method(_instance, "ChangeFileOpenDirectory", paramsArray);
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="inches">Single Inches</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single InchesToPoints(Single inches)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(inches);
			object returnItem = Invoker.MethodReturn(_instance, "InchesToPoints", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="centimeters">Single Centimeters</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single CentimetersToPoints(Single centimeters)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(centimeters);
			object returnItem = Invoker.MethodReturn(_instance, "CentimetersToPoints", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="millimeters">Single Millimeters</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single MillimetersToPoints(Single millimeters)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(millimeters);
			object returnItem = Invoker.MethodReturn(_instance, "MillimetersToPoints", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="picas">Single Picas</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PicasToPoints(Single picas)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(picas);
			object returnItem = Invoker.MethodReturn(_instance, "PicasToPoints", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="lines">Single Lines</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single LinesToPoints(Single lines)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(lines);
			object returnItem = Invoker.MethodReturn(_instance, "LinesToPoints", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="points">Single Points</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PointsToInches(Single points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(points);
			object returnItem = Invoker.MethodReturn(_instance, "PointsToInches", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="points">Single Points</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PointsToCentimeters(Single points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(points);
			object returnItem = Invoker.MethodReturn(_instance, "PointsToCentimeters", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="points">Single Points</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PointsToMillimeters(Single points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(points);
			object returnItem = Invoker.MethodReturn(_instance, "PointsToMillimeters", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="points">Single Points</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PointsToPicas(Single points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(points);
			object returnItem = Invoker.MethodReturn(_instance, "PointsToPicas", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="points">Single Points</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PointsToLines(Single points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(points);
			object returnItem = Invoker.MethodReturn(_instance, "PointsToLines", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="points">Single Points</param>
		/// <param name="fVertical">optional object fVertical</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PointsToPixels(Single points, object fVertical)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(points, fVertical);
			object returnItem = Invoker.MethodReturn(_instance, "PointsToPixels", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="points">Single Points</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PointsToPixels(Single points)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(points);
			object returnItem = Invoker.MethodReturn(_instance, "PointsToPixels", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="pixels">Single Pixels</param>
		/// <param name="fVertical">optional object fVertical</param>
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PixelsToPoints(Single pixels, object fVertical)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pixels, fVertical);
			object returnItem = Invoker.MethodReturn(_instance, "PixelsToPoints", paramsArray);
			return (Single)returnItem;
		}

		/// <summary>
		/// SupportByVersion Word 9, 10, 11, 12, 14
		/// </summary>
		/// <param name="pixels">Single Pixels</param>
		[CustomMethodAttribute]
		[SupportByVersionAttribute("Word", 9,10,11,12,14)]
		public static Single PixelsToPoints(Single pixels)
		{
			object[] paramsArray = Invoker.ValidateParamsArray(pixels);
			object returnItem = Invoker.MethodReturn(_instance, "PixelsToPoints", paramsArray);
			return (Single)returnItem;
		}

		#endregion
	}
}